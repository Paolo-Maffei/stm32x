; Minimal CPM 2.2 BIOS -jcw, 2018-11-10

VERS:   equ 01h

; Memory map -------------------------------------------------------------------

CCP:    equ 0E800h
BDOS:   equ CCP + 0806h
BIOS:   equ CCP + 1600h
BEND:   equ CCP + 17FEh

; low memory -------------------------------------------------------------------

iobyte: equ 03h     ; Intel standard I/O definition byte
usrdrv: equ 04h     ; Current user number and drive
tpabuf: equ 0080h   ; Default I/O buffer and command line storage

         org BIOS

; BIOS jump table --------------------------------------------------------------

	jp boot     ;  0 Initialize
wboote: jp wboot    ;  1 Warm boot
	jp conist   ;  2 Console status
	jp conin    ;  3 Console input
	jp conout   ;  4 Console OUTput
	jp list     ;  5 List OUTput
	jp punch    ;  6 punch OUTput
	jp reader   ;  7 Reader input
	jp home     ;  8 Home disk
	jp seldsk   ;  9 Select disk
	jp settrk   ; 10 Select track
	jp setsec   ; 11 Select sector
	jp setdma   ; 12 Set DMA ADDress
	jp read     ; 13 Read 128 bytes
	jp write    ; 14 Write 128 bytes
	jp listst   ; 15 List status
	jp sectrn   ; 16 Sector translate

; Disk Parameter Headers -------------------------------------------------------

dpbase:	dw 0,0,0,0,dirbuf,dpb,0,alv0
	dw 0,0,0,0,dirbuf,dpb,0,alv1
	dw 0,0,0,0,dirbuf,dpb,0,alv2

dpb:	dw 26  ; SPT - sectors per track
	db 3   ; BSH - block shift factor
	db 7   ; BLM - block mask
	db 0   ; EXM - Extent mask
	dw 242 ; DSM - Storage size (blocks - 1)
	dw 63  ; DRM - Number of directory entries - 1
	db 192 ; AL0 - 1 bit set per directory block
	db 0   ; AL1 - ... 8 more bits
	dw 0   ; CKS - DIR check vector size (DRM+1)/4 (0=fixed disk)
	dw 2   ; OFF - Reserved tracks

; Cold boot --------------------------------------------------------------------

boot:	di
	ld sp,0100h

        ld de,dirbuf
        in a,(3)                ; display greeting

	xor a
	ld (iobyte),a
	ld (usrdrv),a
	jr gocpm

; Warm boot --------------------------------------------------------------------

wboot:	di
	ld sp,0100h

        ld a,(usrdrv)
        ld b,44                 ; read CCP + BDOS into memory
        ld de,1                 ; skip first sector on first track
        ld hl,CCP               ; start address
	in a,(4)                ; disk read request

; Common code for cold and warm boot

gocpm:	ld hl,tpabuf            ; Address of BIOS DMA buffer
	ld (dmaadr),hl
	ld a,0C3h               ; Opcode for 'JP'
	ld (00h),a              ; Load at start of RAM
	ld hl,wboote            ; Address of jump for a warm boot
	ld (01h),hl
	ld (05h),a              ; Opcode for 'JP'
	ld hl,BDOS              ; Address of jump for the BDOS
	ld (06h),hl
	ld a,(usrdrv)           ; Save new drive number (0)
	ld c,a                  ; Pass drive number in C
	jp CCP                  ; Start CP/M by jumping to the CCP

; Console I/O ------------------------------------------------------------------

conist:	in a,(0)
	ret

conin:	in a,(1)
	ret

conout:	in a,(2)
	ret

reader:	ld a,1Ah
	ret

; Disk I/O ---------------------------------------------------------------------

seldsk: ld a,c
	cp 3
        jr nc,baddsk
        ld h,0
        ld l,c
        add hl,hl
        add hl,hl
        add hl,hl
        add hl,hl
        ld de,dpbase
        add hl,de
savdsk:	ld (sekdsk),a
        ret

baddsk: ld hl,0
        ld a,(usrdrv)
        sub a,c
        ret nz
        ld (usrdrv),a
        jr savdsk

home:	ld c,0
settrk: ld a,c
	ld (seksat+1),a
        ret

setsec: ld hl,seksat
        ld (hl),c
        ret

setdma: ld (dmaadr),bc
        ret

sectrn: ld l,c
	ld h,b
        ret

read:	ld a,(sekdsk)
        ld b,1
        ld de,(seksat)
        ld hl,(dmaadr)
        in a,(4)
	ret

write:	ld a,(sekdsk)
        ld b,1
        ld de,(seksat)
        ld hl,(dmaadr)
        in a,(5)
	ret

listst:
list:
punch:
	xor a
	ret

; Data area --------------------------------------------------------------------

dirbuf: db '64K CP/M 2.2',13,10,0
        ds dirbuf+128-$ ; scratch directory area

sekdsk: ds 1   ; seek disk number
seksat: ds 2   ; seek sector and track number
dmaadr: ds 2   ; last dma address

alv0:   ds 32  ; allocation vector 0 (max 255 blocks)
alv1:   ds 32  ; allocation vector 1 (max 255 blocks)
alv2:   ds 32  ; allocation vector 2 (max 255 blocks)

spare:  equ BEND-$
        ds spare                ; BIOS base page and version number
        dw BIOS + VERS          ; ... at end of memory

; ------------------------------------------------------------------------------

        end

Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page   1
BIOS3   Z80

    1                   ; BIOS for CP/M Plus (for ALTAIR 8800 with Z80 CPU as SIMH simulation)
    2                   ; written by Peter Schorn (January 2002)
    3                   ; based on work by Bill Smith (CPM3ON2)
    4                   ; and on Charles (Dutch) Owen's BIOS for CPM2.2
    5                   ; and on Digital Research's modular BIOS
    6                   
    7                   ; Change history
    8                   
    9                   ; 02-May-2009, P. Schorn, removed LD BC,(addr) and DJNZ, bug found by Michael Rychlik
   10                   ; 19-Aug-2008, P. Schorn, number of simulated hard drives is fully taken
   11                   ;			  into account and can be 0..8
   12                   ; 11-Jan-2007, H. Harte,  added support for DPB's retrieved
   13                   ;                         from controller, and 128/256/512-byte
   14                   ;                         physical sector sizes on a per-disk basis.
   15                   ; 16-Oct-2002, P. Schorn, added simulated hard drive
   16                   ; 15-Apr-2002, P. Schorn, simplifed disk read / write code
   17                   ; 21-Mar-2002, P. Schorn, added test for banked memory
   18                   ; 01-Mar-2002, P. Schorn, removed unused equ statements
   19                   ; 23-Feb-2002, P. Schorn, removed SIMH reset from time routine
   20                   
BIOS3.Z80 - Missing : Line 00021
		.8080
   21 0000'             		.8080
BIOS3.Z80 - JMP Undefined Line 00022
jpop		equ	jmp		; jp instruction
   22         0000      jpop		equ	jmp		; jp instruction
   23                   
   24                   		.Z80
   25                   
   26         0008      drives		equ	8		; number of drives supported
   27         FFFF      true		equ	-1
   28         0000      false		equ	not true
   29                   
   30         FFFF      sleepol		equ	true		; if true then sleep a bit while status polling
   31                   					; Note: requires SIMH
   32                   
   33                   
   34                   		maclib	DEFS.LIB	; file name must be upper case!
   35                   					; defines, banked, nhdisks and expcom
   36                   ; defaults
   37                       ifndef	nhdisks
   39                       endif
   40                   
   41                       ifndef	banked
   43                       endif
   44                   
   45         FFFF          if	nhdisks gt 0
   46                   ; constants for hard disk port
   47         0001      hdskReset	equ	1		; command to reset controller
   48         0002      hdskRead	equ	2		; read command
   49         0003      hdskWrite	equ	3		; write command
   50         0004      hdskParam	equ	4		; param command
   51         00FD      hdskport	equ	0fdh		; control port for simulated hard disk
   52                       endif
   53                   
   54         00FE      tracks		equ	254
   55         00FF      track1		equ	tracks+1
   56         0089      asecsiz		equ	137		; size of ALTAIR physical sector
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page   2
BIOS3   Z80

   57         0080      csecsiz		equ	0080h		; sector size CP/M
   58         0006      restrk		equ	6		; reserved tracks
   59         0020      spt		equ	32		; sectors per track
   60         001F      sptmask		equ	spt-1		; mask corresponding to 'spt'
   61         000D      cr		equ	13		; Carriage Return
   62         000A      lf		equ	10		; Line Feed
   63         0001      getch		equ	1		; BDOS function
   64         0009      print		equ	9		; BDOS function
   65         000F      open		equ	15		; BDOS function
   66         0014      readseq		equ	20		; BDOS function
   67         001A      dma		equ	26		; BDOS function
   68         002C      multisec	equ	44		; BDOS function
   69         0001      bioserr		equ	1		; 1 indicates BIOS error
   70                   
   71                   ;	Address		Mode	Function
   72                   ;	-------		----	--------
   73                   ;	selout		Out	Selects and enables controller and drive
   74                   ;	statin		In	Indicates status of drive and controller
   75                   ;	dskcon		Out	Controls disk function
   76                   ;	secpos		In	Indicates current sector position of disk
   77                   ;	dskwrit		Out	Write data
   78                   ;	dskread		In	Read data
   79                   
   80         0008      selout	equ	8		; port to select and enable controller and drive (OUT)
   81                   ;	+---+---+---+---+---+---+---+---+
   82                   ;	| C | X | X | X |   Device      |
   83                   ;	+---+---+---+---+---+---+---+---+
   84                   ;
   85                   ;	C	= If this bit is 1, the disk controller selected by 'device' is
   86                   ;		  cleared. If the bit is zero, 'device' is selected as the
   87                   ;		  device being controlled by subsequent I/O operations.
   88                   ;	X	= not used
   89                   ;	Device	= value zero thru 15, selects drive to be controlled.
   90                   
   91         0008      statin	equ	8		; port indicating status of drive and controller (IN)
   92                   ;	+---+---+---+---+---+---+---+---+
   93                   ;	| R | Z | I | X | X | H | M | W |
   94                   ;	+---+---+---+---+---+---+---+---+
   95                   ;
   96                   ;	W - When 0, write circuit ready to write another byte.
   97                   ;	M - When 0, head movement is allowed
   98                   ;	H - When 0, indicates head is loaded for read/write
   99                   ;	X - not used (will be 0)
  100                   ;	I - When 0, indicates interrupts enabled (not used this simulator)
  101                   ;	Z - When 0, indicates head is on track 0
  102                   ;	R - When 0, indicates that read circuit has new byte to read
  103                   
  104         0009      dskcon	equ	9		; port to control disc function (OUT)
  105                   ;	+---+---+---+---+---+---+---+---+
  106                   ;	| W | C | D | E | U | H | O | I |
  107                   ;	+---+---+---+---+---+---+---+---+
  108                   ;
  109                   ;	I - When 1, steps head IN one track
  110                   ;	O - When 1, steps head OUT one track
  111                   ;	H - When 1, loads head to drive surface
  112                   ;	U - When 1, unloads head
  113                   ;	E - Enables interrupts (ignored by this simulator)
  114                   ;	D - Disables interrupts (ignored by this simulator)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page   3
BIOS3   Z80

  115                   ;	C - When 1 lowers head current (ignored by this simulator)
  116                   ;	W - When 1, starts Write Enable sequence:
  117                   ;	    W bit on device 'statin' (see above) will go 1 and data will be read from
  118                   ;	    port 'dskread' until 137 bytes have been read by the controller from
  119                   ;	    that port. The W bit will go off then, and the sector data will be written
  120                   ;	    to disk. Before you do this, you must have stepped the track to the desired
  121                   ;	    number, and waited until the right sector number is presented on
  122                   ;	    device 'secpos', then set this bit.
  123                   
  124         0009      secpos	equ	9		; port to indicate current sector position of disk (IN)
  125                   ;	As the sectors pass by the read head, they are counted and the
  126                   ;	number of the current one is available in this register.
  127                   ;
  128                   ;	+---+---+---+---+---+---+---+---+
  129                   ;	| X | X |  Sector Number    | T |
  130                   ;	+---+---+---+---+---+---+---+---+
  131                   ;
  132                   ;	X		= Not used
  133                   ;	Sector number	= binary of the sector number currently under the head, 0-31.
  134                   ;	T		= Sector True, is a 1 when the sector is positioned to read or write.
  135                   
  136         000A      dskwrit	equ	10		; port to write data (OUT)
  137         000A      dskread	equ	10		; port to read data (IN)
  138                   
  139                   ;	All I/O is via programmed I/O. Each device has a status port
  140                   ;	and a data port. A write to the status port can select
  141                   ;	some options for the device although the simulator only
  142                   ;	recognizes the reset command (0x03).
  143                   ;	A read of the status port gets the port status:
  144                   ;
  145                   ;	+---+---+---+---+---+---+---+---+
  146                   ;	| X | X | X | X | X | X | O | I |
  147                   ;	+---+---+---+---+---+---+---+---+
  148                   ;
  149                   ;	I - A 1 in this bit position means a character has been received
  150                   ;		on the data port and is ready to be read.
  151                   ;	O - A 1 in this bit means the port is ready to receive a character
  152                   ;		on the data port and transmit it out over the serial line.
  153                   ;
  154                   ;	A read to the data port gets the buffered character, a write
  155                   ;	to the data port writes the character to the device.
  156         0010      constat	equ	16		; sio port 1 status port
  157         0011      condata	equ	17		; sio port 1 data port
  158         0012      punstat	equ	18		; sio port 2 status port
  159         0013      pundata	equ	19		; sio port 2 data port
  160                   
  161                   ; masks for disk controller (statin)
  162         0002      mhm	equ	02h		; head movement mask
  163         0040      mtzero	equ	40h		; head on track zero mask
  164         00FF      mall	equ	0ffh		; everything ok mask
  165                   
  166                   ; commands for disk controller (dskcon)
  167         0001      cstepin	equ	01h		; step in command
  168         0002      cstepot	equ	02h		; step out command
  169         0004      cload	equ	04h		; load head to drive surface command
  170         0008      cuload	equ	08h		; unload head from drive surface command
  171         0080      cwrseq	equ	80h		; 'start write enable sequence' command
  172                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page   4
BIOS3   Z80

  173                   ; masks for SIO controller (constat, punstat)
  174         0002      mout	equ	02h		; output allowed mask
  175                   
  176                   ; commands for SIO controller (constat, punstat)
  177         0003      creset	equ	3		; reset command
  178                   
  179         00FE      simhport	equ	0feh		; SIMH port
  180         FF00      coldboot	equ	0ff00h		; cold boot ROM starts here
  181         0000      bootram		equ	0000h
  182         0005      bdos		equ	0005h
  183         0100      ccp		equ	0100h
  184         0009      readclock	equ	9		; SIMH command to read clock
  185         000A      writeclock	equ	10		; SIMH command to write clock
  186         001B      simhsleep	equ	27		; SIMH sleep command
  187                   
  188         0000      	if	banked
  192                   	endif
  193                   
  194         0005      parblocksize	equ	5		; 5 byte in SCB for date/time data
  195                   
  196         0001      mb$input	equ	00000001b	; device may do input
  197         0002      mb$output	equ	00000010b	; device may do output
  198         0003      mb$in$out	equ	mb$input+mb$output
  199         0000      baud$none	equ	0		; no baud rate associated
  200                   
  201                   ldbc	macro	addr
  202                   	push	hl
  203                   	ld	hl,(addr)
  204                   	ld	b,h
  205                   	ld	c,l
  206                   	pop	hl
  207                   	endm
  208                   
  209                   ;	external references
  210                   	extrn	@civec, @covec, @aovec, @aivec, @lovec, @bnkbf
  211                   	extrn	@crdma, @crdsk,	@fx, @resel, @vinfo, @usrcd
  212                   	extrn	@ermde, @date, @hour, @min, @sec, @mxtpa
  213                   
  214                   ;--------------------------------------------------------
  215                   ;
  216                   ;	cp/m plus version 3.0 jump table
  217                   ;
  218                   ;--------------------------------------------------------
  219                   	cseg
  220                   
  221 0000' C3 0000"    	jp	boot		; arrive here from cold start load
  222 0003' C3 0076'    warmpt:	jp	wboot		; arrive here for warm start
  223 0006' C3 019D'    	jp	const		; return console input status
  224 0009' C3 01B8'    	jp	conin		; read console character
  225 000C' C3 013A'    	jp	conout		; write console character
  226 000F' C3 0146'    	jp	list		; write list character
  227 0012' C3 0140'    	jp	auxout		; write aux character
  228 0015' C3 01BE'    	jp	auxin		; read aux character
  229 0018' C3 006A"    	jp	home		; move to track zero on selected drive
  230 001B' C3 001D"    	jp	seldsk		; select disk drive
  231 001E' C3 006D"    	jp	settrk		; set track number
  232 0021' C3 0073"    	jp	setsec		; set sector number
  233 0024' C3 0078"    	jp	setdma		; set dma address
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page   5
BIOS3   Z80

  234 0027' C3 0094"    	jp	read		; read selected sector
  235 002A' C3 00DB"    	jp	write		; write selected sector
  236 002D' C3 0169'    	jp	listst		; return list device status
  237 0030' C3 007F"    	jp	sectrn		; translate logical to physical sector number
  238 0033' C3 015D'    	jp	conost		; return console output status
  239 0036' C3 01A3'    	jp	auxist		; return aux device input status
  240 0039' C3 0163'    	jp	auxost		; return aux device output status
  241 003C' C3 0100'    	jp	devtbl		; return address of character i/o table
  242 003F' C3 0103'    	jp	devini		; init character i/o devices
  243 0042' C3 0104'    	jp	drvtbl		; return address of disk drive table
  244 0045' C3 008A"    	jp	multio		; set number of consec. sec. to read/write
  245 0048' C3 01B6'    	jp	flush		; flush user [de]blocking buffers
  246 004B' C3 0134'    	jp	move		; copy memory to memory
  247 004E' C3 0108'    	jp	time		; signal time and date operation
  248 0051' C3 0107'    	jp	selmem		; select memory bank
  249 0054' C3 007E"    	jp	setbnk		; set bank for next dma
  250 0057' C3 0103'    	jp	xmove		; set banks for next move
  251 005A' C3 0000     	jp	0		; reserved for future expansion
  252 005D' C3 0000     	jp	0		; reserved for future expansion
  253 0060' C3 0000     	jp	0		; reserved for future expansion
  254                   
  255                   	dseg			; this part can be banked
  256                   
  257 0000" 06 01       boot:	ld	b,1		; indicate boot
  258 0002" 21 8000     	ld	hl,8000h
  259 0005" 22 0000#    	ld	(@civec),hl	; CONSOLE:=CON for input
  260 0008" 22 0000#    	ld	(@covec),hl	; CONSOLE:=CON also for output
  261 000B" 21 4000     	ld	hl,4000h
  262 000E" 22 0000#    	ld	(@aovec),hl	; AUXOUT:=PTP
  263 0011" 22 0000#    	ld	(@lovec),hl	; LST:=PTP
  264 0014" 21 2000     	ld	hl,2000h
  265 0017" 22 0000#    	ld	(@aivec),hl	; AUXIN:=PTR
  266 001A" C3 0078'    	jp	wboot1
  267                   
  268                   	cseg			; following in resident memory
  269                   
  270 0063' AF          ldir80:	xor	a		; <A> := 0
  271 0064' 3D          	dec	a		; <A> := 1111'1111b
  272 0065' EA 006B'    	jp	pe,ldir1	; on an 8080 this means parity is even
  273 0068' ED B0       	ldir			; otherwise we have a Z80
  274 006A' C9          	ret
  275 006B' 7E          ldir1:	ld	a,(hl)
  276 006C' 12          	ld	(de),a
  277 006D' 23          	inc	hl
  278 006E' 13          	inc	de
  279 006F' 0B          	dec	bc
  280 0070' 79          	ld	a,c
  281 0071' B0          	or	b
  282 0072' C2 006B'    	jp	nz,ldir1
  283 0075' C9          	ret
  284                   
  285 0076' 06 00       wboot:	ld	b,0		; indicate warm boot
  286 0078' 31 0100'    wboot1:	ld	sp,bstack
  287                   
  288                   ;
  289                   ;	initialize low memory jumps
  290                   ;
  291                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page   6
BIOS3   Z80

  292         0000          if	banked
  295                       endif
  296                   
  297 007B' 21 0003'    	ld	hl,warmpt
  298 007E' 22 0001     	ld	(bootram+1),hl
  299 0081' 2A 0000#    	ld	hl,(@mxtpa)
  300 0084' 22 0006     	ld	(bdos+1),hl
  301 0087' 3E 00       	ld	a,jpop
  302 0089' 32 0000     	ld	(bootram),a
  303 008C' 32 0005     	ld	(bdos),a
  304 008F' 78          	ld	a,b
  305 0090' B7          	or	a
  306 0091' CA 009A'    	jp	z,ldccp		; no message on warm boot
  307 0094' 11 0580'    	ld	de,versio	; print version information
  308 0097' CD 00F3'    	call	printf
  309                   ;
  310                   ;	load ccp.com into tpa
  311                   ;
  312 009A'             ldccp:
  313                   
  314         FFFF          if	nhdisks gt 0
  315 009A' 06 20       	ld	b,32		; reset hard disk controller
  316 009C' 3E 01       	ld	a,hdskReset	; by issuing the reset command 32 times
  317 009E' D3 FD       rhdsk:	out	(hdskPort),a
  318 00A0' 05          	dec	b
  319 00A1' C2 009E'    	jp	nz,rhdsk	; post condition is <B> := 0
  320                       endif
  321                   
  322 00A4' 21 031E"    	ld	hl,ontrk0	; start address of table for current track positions
  323 00A7' 06 08       	ld	b,drives	; number of disks
  324 00A9' 36 FF       resett:	ld	(hl),track1	; reset entry for disk
  325 00AB' 23          	inc	hl		; point to next entry
  326 00AC' 05          	dec	b		; decrement counter for disks to go
  327 00AD' C2 00A9'    	jp	nz,resett	; jump if not yet done
  328 00B0' AF          	xor	a
  329 00B1' 32 0508'    	ld	(ccpfcb+15),a	; zero extent
  330 00B4' 21 0000     	ld	hl,0
  331 00B7' 22 0519'    	ld	(fcbnr),hl	; start at beginning of file
  332 00BA' 11 04F9'    	ld	de,ccpfcb
  333 00BD' 0E 0F       	ld	c,open
  334 00BF' CD 0005     	call	bdos		; open file containing ccp
  335 00C2' 11 051C'    	ld	de,opnmsg
  336 00C5' 3C          	inc	a
  337 00C6' CA 00E8'    	jp	z,prterr	; error if file not found
  338 00C9' 11 0100     	ld	de,ccp
  339 00CC' 0E 1A       	ld	c,dma
  340 00CE' CD 0005     	call	bdos		; start of tpa
  341 00D1' 11 0080     	ld	de,128
  342 00D4' 0E 2C       	ld	c,multisec
  343 00D6' CD 0005     	call	bdos		; allow up to 16k bytes
  344 00D9' 11 04F9'    	ld	de,ccpfcb
  345 00DC' 0E 14       	ld	c,readseq
  346 00DE' CD 0005     	call	bdos		; load the thing
  347 00E1' 11 0537'    	ld	de,iomsg
  348 00E4' 3C          	inc	a
  349 00E5' C2 0100     	jp	nz,ccp
  350 00E8' CD 00F3'    prterr:	call	printf		; print the complaint
  351 00EB' 0E 01       	ld	c,getch
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page   7
BIOS3   Z80

  352 00ED' CD 0005     	call	bdos		; wait for any key
  353 00F0' C3 FF00     	jp	coldboot	; attempt cold boot
  354 00F3' 0E 09       printf:	ld	c,print
  355 00F5' C3 0005     	jp	bdos
  356 00F8'   0008      	ds	8
  357 0100'             bstack:
  358 0100' 21 05B6'    devtbl:	ld	hl,ctbla
  359 0103'             devini:
  360 0103' C9          xmove:	ret
  361 0104' 21 0269'    drvtbl:	ld	hl,dtbla
  362                   
  363         0000          if	banked
  395                       else
  396 0107' C9          selmem:	ret			; merge with drvtbl
  397                       endif
  398                   
  399 0108' E5          time:	push	hl
  400 0109' D5          	push	de
  401 010A' 79          	ld	a,c
  402 010B' FE FF       	cp	0ffh
  403 010D' CA 0124'    	jp	z,setclock
  404 0110' 3E 09       	ld	a,readclock
  405 0112' D3 FE       	out	(simhport),a
  406 0114' 21 0000#    	ld	hl,@date
  407 0117' 06 05       	ld	b,parblocksize
  408 0119' DB FE       timag:	in	a,(simhport)
  409 011B' 77          	ld	(hl),a
  410 011C' 23          	inc	hl
  411 011D' 05          	dec	b
  412 011E' C2 0119'    	jp	nz,timag
  413 0121' C3 0131'    	jp	timdon
  414 0124'             setclock:
  415 0124' 3E 0A       	ld	a,writeclock
  416 0126' D3 FE       	out	(simhport),a
  417 0128' 21 0000#    	ld	hl,@date
  418 012B' 7D          	ld	a,l
  419 012C' D3 FE       	out	(simhport),a
  420 012E' 7C          	ld	a,h
  421 012F' D3 FE       	out	(simhport),a
  422 0131' D1          timdon:	pop	de
  423 0132' E1          	pop	hl
  424 0133' C9          	ret
  425                   
  426 0134' EB          move:	ex	de,hl
  427 0135' CD 0063'    	call	ldir80
  428 0138' EB          	ex	de,hl
  429 0139' C9          	ret
  430                   
  431                   	; conout
  432                   	;	console output. send character in <C>
  433                   	;			to all selected devices
  434 013A' 2A 0000#    conout:	ld	hl,(@covec)	; fetch console output bit vector
  435 013D' C3 0149'    	jp	out$scan
  436                   
  437                   	; auxout
  438                   	;	auxiliary output. send character in <C>
  439                   	;			to all selected devices
  440 0140' 2A 0000#    auxout:	ld	hl,(@aovec)	; fetch aux output bit vector
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page   8
BIOS3   Z80

  441 0143' C3 0149'    	jp	out$scan
  442                   
  443                   	; list
  444                   	;	list output. send character in <C>
  445                   	;			to all selected devices
  446 0146' 2A 0000#    list:	ld	hl,(@lovec)	; fetch list output vector
  447 0149'             out$scan:
  448 0149' 06 00       	ld	b,0		; start with device 0
  449 014B'             co$next:
  450 014B' 29          	add	hl,hl		; shift out next bit
  451 014C' D2 0156'    	jp	nc,not$out$device
  452 014F' E5          	push	hl		; save the vector
  453 0150' C5          	push	bc		; save the count and character
  454 0151' CD 01E5'    	call	?co		; if device selected, print it
  455 0154' C1          	pop	bc		; recover count and character
  456 0155' E1          	pop	hl		; recover the rest of the vector
  457 0156'             not$out$device:
  458 0156' 04          	inc	b		; next device number
  459 0157' 7C          	ld	a,h
  460 0158' B5          	or	l		; see if any devices left
  461 0159' C2 014B'    	jp	nz,co$next	; and go find them...
  462 015C' C9          	ret
  463                   
  464                   	; conost
  465                   	;	console output status. return true if
  466                   	;			all selected console output devices
  467                   	;			are ready
  468 015D' 2A 0000#    conost:	ld	hl,(@covec)	; get console output bit vector
  469 0160' C3 016C'    	jp	ost$scan
  470                   
  471                   	; auxost
  472                   	;	auxiliary output status. return true if
  473                   	;		all selected auxiliary output devices
  474                   	;		are ready
  475 0163' 2A 0000#    auxost:	ld	hl,(@aovec)	; get aux output bit vector
  476 0166' C3 016C'    	jp	ost$scan
  477                   
  478                   	; listst
  479                   	;	list output status. return true if
  480                   	;		all selected list output devices
  481                   	;		are ready
  482 0169' 2A 0000#    listst:	ld	hl,(@lovec)	; get list output bit vector
  483 016C'             ost$scan:
  484 016C' 06 00       	ld	b,0		; start with device 0
  485 016E'             cos$next:
  486 016E' 19          	add	hl,de		; check next bit
  487 016F' E5          	push	hl		; save the vector
  488 0170' C5          	push	bc		; save the count
  489 0171' 3E FF       	ld	a,0ffh		; assume device ready
  490 0173' DC 01EB'    	call	c,?cost		; check status for this device
  491 0176' C1          	pop	bc		; recover count
  492 0177' E1          	pop	hl		; recover bit vector
  493 0178' B7          	or	a		; see if device ready
  494 0179' C8          	ret	z		; if any not ready, return false
  495 017A' 04          	inc	b		; drop device number
  496 017B' 7C          	ld	a,h
  497 017C' B5          	or	l		; see if any more selected devices
  498 017D' C2 016E'    	jp	nz,cos$next
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page   9
BIOS3   Z80

  499 0180' F6 FF       	or	0ffh		; all selected were ready, return true
  500 0182' C9          	ret
  501                   
  502 0183' C5          cistl:	push	bc		; get input status with <BC> and <HL> saved
  503 0184' E5          	push	hl
  504 0185' CD 01DF'    	call	?cist
  505 0188' E1          	pop	hl
  506 0189' C1          	pop	bc
  507 018A' B7          	or	a
  508 018B' C9          	ret
  509                   
  510 018C' C5          costl:	push	bc		; get output status, saving <BC> & <HL>
  511 018D' E5          	push	hl
  512 018E' CD 01EB'    	call	?cost
  513 0191' E1          	pop	hl
  514 0192' C1          	pop	bc
  515 0193' B7          	or	a
  516 0194' C9          	ret
  517                   
  518 0195' C5          cil:	push	bc		; get input, saving <BC> & <HL>
  519 0196' E5          	push	hl
  520 0197' CD 01D9'    	call	?ci
  521 019A' E1          	pop	hl
  522 019B' C1          	pop	bc
  523 019C' C9          	ret
  524                   
  525                   	; const
  526                   	;	console input status. return true if
  527                   	;		any selected console input device
  528                   	;		has an available character
  529 019D' 2A 0000#    const:	ld	hl,(@civec)	; get console input bit vector
  530 01A0' C3 01A6'    	jp	ist@scan
  531                   
  532                   	; auxist
  533                   	;	auxiliary input status. return true if
  534                   	;		any selected auxiliary input device
  535                   	;		has an available character
  536 01A3' 2A 0000#    auxist:	ld	hl,(@aivec)	; get aux input bit vector
  537 01A6'             ist@scan:
  538 01A6' 06 00       	ld	b,0		; start with device 0
  539 01A8'             cis$next:
  540 01A8' 29          	add	hl,hl		; check next bit
  541 01A9' 3E 00       	ld	a,0		; assume device not ready
  542 01AB' DC 0183'    	call	c,cistl		; check status for this device
  543 01AE' B7          	or	a
  544 01AF' C0          	ret	nz		; if any ready, return true
  545 01B0' 04          	inc	b		; next device number
  546 01B1' 7C          	ld	a,h
  547 01B2' B5          	or	l		; see if any more selected devices
  548 01B3' C2 01A8'    	jp	nz,cis$next
  549 01B6' AF          flush:	xor	a		; all selected were not ready, return false
  550 01B7' C9          	ret
  551                   
  552                   	; conin
  553                   	;	console input. return character from first
  554                   	;		ready console input device
  555 01B8' 2A 0000#    conin:	ld	hl,(@civec)
  556 01BB' C3 01C1'    	jp	in$scan
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page  10
BIOS3   Z80

  557                   
  558                   	; auxin
  559                   	;	auxiliary input. return character from first
  560                   	;		ready auxiliary input device
  561 01BE' 2A 0000#    auxin:	ld	hl,(@aivec)
  562 01C1'             in$scan:
  563 01C1' E5          	push	hl		; save bit vector
  564 01C2' 06 00       	ld	b,0
  565 01C4'             ci$next:
  566 01C4' 29          	add	hl,hl		; shift out next bit
  567 01C5' 3E 00       	ld	a,0		; insure zero a (nonexistant device not ready)
  568 01C7' DC 0183'    	call	c,cistl		; see if the device has a character
  569 01CA' B7          	or	a
  570 01CB' C2 01D8'    	jp	nz,ci$rdy	; this device has a character
  571 01CE' 04          	inc	b		; else, next device
  572 01CF' 7C          	ld	a,h
  573 01D0' B5          	or	l		; see if any more devices
  574 01D1' C2 01C4'    	jp	nz,ci$next	; go look at them
  575 01D4' E1          	pop	hl		; recover bit vector
  576 01D5' C3 01C1'    	jp	in$scan		; loop til we find a character
  577 01D8' E1          ci$rdy:	pop	hl		; discard extra stack
  578                   ; device number in b for ?ci, ?co, ?cist, ?cost
  579                   
  580 01D9' 21 01F8'    ?ci:	ld	hl,citab
  581 01DC' C3 01EE'    	jp	dotab
  582 01DF' 21 01FE'    ?cist:	ld	hl,cisttab
  583 01E2' C3 01EE'    	jp	dotab
  584 01E5' 21 0204'    ?co:	ld	hl,cotab
  585 01E8' C3 01EE'    	jp	dotab
  586 01EB' 21 020A'    ?cost:	ld	hl,costtab
  587 01EE' 58          dotab:	ld	e,b
  588 01EF' 16 00       	ld	d,0
  589 01F1' 19          	add	hl,de
  590 01F2' 19          	add	hl,de
  591 01F3' 7E          	ld	a,(hl)
  592 01F4' 23          	inc	hl
  593 01F5' 66          	ld	h,(hl)
  594 01F6' 6F          	ld	l,a
  595 01F7' E9          	jp	(hl)
  596                   
  597                   ; crt, ptp, ptr
  598 01F8' 0220'       citab:	dw	xconin		; CRT
  599 01FA' 0000        	dw	0		; PTP
  600 01FC' 0258'       	dw	xauxin		; PTR
  601                   
  602 01FE'             cisttab:
  603 01FE' 0210'       	dw	xconst		; CRT
  604 0200' 0000        	dw	0		; PTP
  605 0202' 0261'       	dw	xauxist		; PTR
  606                   
  607 0204' 0230'       cotab:	dw	xconout		; CRT
  608 0206' 0244'       	dw	xauxout		; PTP
  609 0208' 0000        	dw	0		; PTR
  610                   
  611 020A'             costtab:
  612 020A' 023B'       	dw	xconost		; CRT
  613 020C' 024F'       	dw	xauxost		; PTP
  614 020E' 0000        	dw	0		; PTR
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page  11
BIOS3   Z80

  615                   
  616                   ; Serial device definitions
  617                   ; We support console, AUXIN (SIMH PTR device) and AUXOUT (SIMH PTP device).
  618                   ; The CP/M device name is AUX: for both input and output.
  619                   ; The list device is redirected to PTP.
  620                   
  621         FFFF      	if	sleepol
  622                   
  623 0210' DB 10       xconst:	in	a,(constat)
  624 0212' 1F          	rra
  625 0213' 3E 00       	ld	a,0
  626 0215' D2 021A'    	jp	nc,nochr
  627 0218' 3D          	dec	a
  628 0219' C9          	ret
  629 021A' 3E 1B       nochr:	ld	a,simhsleep	; otherwise sleep for SIMHSleep microseconds
  630 021C' D3 FE       	out	(simhport),a	; execute command
  631 021E' AF          	xor	a
  632 021F' C9          	ret
  633                   
  634 0220' DB 10       xconin:	in	a,(constat)	; get console status
  635 0222' 1F          	rra			; I bit into carry
  636 0223' DA 022D'    	jp	c,getchr	; get character
  637 0226' 3E 1B       	ld	a,simhsleep	; otherwise sleep for SIMHSleep microseconds
  638 0228' D3 FE       	out	(simhport),a	; execute command
  639 022A' C3 0220'    	jp	xconin		; try again
  640 022D' DB 11       getchr:	in	a,(condata)	; read character
  641 022F' C9          	ret
  642                   
  643                   	else
  658                   	endif
  659                   
  660 0230'             xconout:
  661 0230' DB 10       	in	a,(constat)
  662 0232' 1F          	rra
  663 0233' 1F          	rra
  664 0234' D2 0230'    	jp	nc,xconout
  665 0237' 79          	ld	a,c
  666 0238' D3 11       	out	(condata),a
  667 023A' C9          	ret
  668                   
  669 023B'             xconost:
  670 023B' DB 10       	in	a,(constat)
  671 023D' 1F          	rra
  672 023E' 1F          	rra
  673 023F' 3E 00       	ld	a,0
  674 0241' D0          	ret	nc
  675 0242' 3D          	dec	a
  676 0243' C9          	ret
  677                   
  678                   ;
  679                   ; Reader/punch routines use sio port 2
  680                   ;
  681 0244'             xauxout:
  682 0244' DB 12       	in	a,(punstat)
  683 0246' 1F          	rra
  684 0247' 1F          	rra
  685 0248' D2 0244'    	jp	nc,xauxout
  686 024B' 79          	ld	a,c
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page  12
BIOS3   Z80

  687 024C' D3 13       	out	(pundata),a
  688 024E' C9          	ret
  689                   
  690 024F'             xauxost:
  691 024F' DB 12       	in	a,(punstat)
  692 0251' 1F          	rra
  693 0252' 1F          	rra
  694 0253' 3E 00       	ld	a,0
  695 0255' D0          	ret	nc
  696 0256' 3D          	dec	a
  697 0257' C9          	ret
  698                   
  699 0258' DB 12       xauxin:	in	a,(punstat)
  700 025A' 1F          	rra
  701 025B' D2 0258'    	jp	nc,xauxin
  702 025E' DB 13       	in	a,(pundata)
  703 0260' C9          	ret
  704                   
  705 0261'             xauxist:
  706 0261' DB 12       	in	a,(punstat)
  707 0263' 1F          	rra
  708 0264' 3E 00       	ld	a,0
  709 0266' D0          	ret	nc
  710 0267' 3D          	dec	a
  711 0268' C9          	ret
  712                   
  713                   	dseg
  714                   
  715 001D" 21 0000     seldsk:	ld	hl,0		; bad drive
  716 0020" 79          	ld	a,c		; drive request
  717 0021" 32 0326"    	ld	(diskno),a
  718 0024" FE 0C       	cp	drives+nhdisks
  719 0026" D0          	ret	nc		; exit if no space alloc for drive
  720 0027" 69          	ld	l,c
  721 0028" 26 00       	ld	h,0
  722 002A" 29          	add	hl,hl		; create index from drive code
  723 002B" 01 0269'    	ld	bc,dtbla
  724 002E" 09          	add	hl,bc		; get pointer to dispatch table
  725 002F" 7E          	ld	a,(hl)
  726 0030" 23          	inc	hl
  727 0031" 66          	ld	h,(hl)
  728 0032" 6F          	ld	l,a		; point at disk descriptor
  729                   
  730         FFFF          if	nhdisks gt 0
  731 0033" 3A 0326"    	ld	a,(diskno)
  732 0036" FE 08       	cp	drives
  733 0038" D2 0040"    	jp	nc, hdsksel
  734                       endif
  735                   
  736 003B" 3E 80       	ld	a,80h
  737 003D" D3 08       	out	(selout),a
  738 003F" C9          	ret
  739                   
  740         FFFF          if	nhdisks gt 0
  741                   ; entry: pointer to disk descriptor in HL.  This must be
  742                   ; preserved.
  743 0040"             hdsksel:
  744 0040" E5          	push	hl		; Preserve pointer to disk descriptor
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page  13
BIOS3   Z80

  745 0041" 01 000C     	ld	bc,12
  746 0044" 09          	add	hl,bc
  747 0045" 7E          	ld	a,(hl)
  748 0046" 23          	inc	hl
  749 0047" 66          	ld	h,(hl)
  750 0048" 6F          	ld	l,a		; point at disk dpb
  751 0049" 3E 04       	ld	a,hdskParam
  752 004B" D3 FD       	out	(hdskPort),a	; Send 'get parameters' command
  753 004D" 3A 0326"    	ld	a,(diskno)
  754 0050" D6 08       	sub	drives
  755 0052" D3 FD       	out	(hdskPort),a	; Send selected HDSK number
  756 0054" 06 11       	ld	b,17
  757 0056"             hdskpl:
  758 0056" DB FD       	in	a,(hdskPort)	; Read 17-bytes of DPB
  759 0058" 77          	ld	(hl), a
  760 0059" 23          	inc	hl
  761 005A" 05          	dec	b
  762 005B" C2 0056"    	jp	nz,hdskpl
  763 005E" DB FD       	in	a,(hdskPort)	; Read LSB of disk's physical sector size.
  764 0060" 32 032C"    	ld	(hsecsiz), a
  765 0063" DB FD       	in	a,(hdskPort)	; Read MSB of disk's physical sector size.
  766 0065" 32 032D"    	ld	(hsecsiz+1), a
  767                   
  768 0068" E1          	pop	hl		; restore pointer to disk descriptor
  769 0069" C9          	ret
  770                       endif
  771                   
  772 006A" 01 0000     home:	ld	bc,0		; move to track 00
  773 006D" 69          settrk:	ld	l,c		; save track
  774 006E" 60          	ld	h,b
  775 006F" 22 0327"    	ld	(track),hl
  776 0072" C9          	ret
  777                   
  778 0073" 79          setsec:	ld	a,c		; set sector
  779 0074" 32 0329"    	ld	(sector),a
  780 0077" C9          	ret
  781                   
  782 0078" 69          setdma:	ld	l,c
  783 0079" 60          	ld	h,b
  784 007A" 22 032A"    	ld	(dmaad),hl	; set dma address
  785 007D" C9          	ret
  786                   
  787         0000          if	banked
  791                       else
  792 007E" C9          setbnk:	ret			; also for setdma
  793                       endif
  794                   
  795                   ;Translate Sector Number Given Translate Table
  796                   ;Entry Parameters:	BC=Logical Sector Number
  797                   ;			DE=Translate Table Address
  798                   ;Returned Values:	HL=Physical Sector Number
  799                   ;
  800                   ;SECTRN performs logical sequential sector address to physical sector
  801                   ;translation to improve the overall response of CP/M 3. Digital Research
  802                   ;ships standard CP/M disk with a skew factor of 6, where six physical
  803                   ;sectors are skipped between each logical read operation. This skew
  804                   ;factor allows enough time between sectors for most programs on a slow
  805                   ;system to process their buffers without missing the next sector. In
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page  14
BIOS3   Z80

  806                   ;computer systems that use fast processors, memory, and disk subsystems,
  807                   ;you can change the skew factor to improve overall response. Typically,
  808                   ;most disk systems perform well with a skew of every other physical
  809                   ;sector. You should maintain support of single-density, IBM 3740
  810                   ;compatible disks using a skew factor of 6 in your CP/M 3 system to allow
  811                   ;information transfer to and from other CP/M users. SECTRN receives a
  812                   ;logical sector number in BC, and a translate table address in DE. The
  813                   ;logical sector number is relative to zero. The translate table address
  814                   ;is obtained from the Disk Parameter Block for the currently selected
  815                   ;disk. The sector number is used as an index into the translate table,
  816                   ;with the resulting physical sector number returned in HL. For standard,
  817                   ;single-density, eight- inch disk systems, the tables and indexing code
  818                   ;are provided in the sample BIOS and need not be changed. Certain drive
  819                   ;types either do not need skewing or perform the skewing externally from
  820                   ;the system software. In this case, the skew table address in the DPH
  821                   ;can be set to zero, and the SECTRN routine can check for the zero in DE
  822                   ;and return with the physical sector set to the logical sector.
  823 007F"             sectrn:
  824         FFFF          if	nhdisks gt 0
  825 007F" 69          	ld	l,c		; <HL> := BC, prepration for <DE> = 0
  826 0080" 60          	ld	h,b		; load upper byte
  827 0081" 23          	inc	hl		; rebase to one
  828 0082" 7B          	ld	a,e		; get lower byte of translate table address
  829 0083" B2          	or	d		; or with upper byte
  830 0084" C8          	ret	z		; if equal to zero, no translation necessary
  831                       endif
  832 0085" EB          	ex	de,hl		; <HL> := translate table address
  833 0086" 09          	add	hl,bc
  834 0087" 6E          	ld	l,(hl)
  835 0088" 26 00       	ld	h,0
  836 008A" C9          multio:	ret
  837                   
  838 008B" 2A 032A"    wldir:	ld	hl,(dmaad)	; source of sector is in 'dmaad'
  839 008E" 11 02F2'    	ld	de,altbuf+3	; destination inside local buffer
  840                   
  841         0000          if	banked
  843                       else
  844 0091" C3 0063'    	jp	ldir80
  845                       endif
  846                   
  847                   ;
  848                   ; altair disk read/write drivers
  849                   ;
  850 0094"             read:
  851         FFFF          if	nhdisks gt 0
  852 0094" 3A 0326"    	ld	a,(diskno)	; get disk number
  853 0097" FE 08       	cp	drives		; compare with number of Altair disks
  854 0099" DA 00AB"    	jp	c,aread		; carry means we got an Altair disk
  855 009C" 3E 02       	ld	a,hdskRead	; otherwise perform hard disk read
  856 009E" CD 00F6"    	call	set2		; send hard disk parameters
  857                   	ldbc	hsecsiz		; sector size can be variable for HDSK Controller
    1 00A1" E5          	push	hl
    2 00A2" 2A 032C"    	ld	hl,(hsecsiz)
    3 00A5" 44          	ld	b,h
    4 00A6" 4D          	ld	c,l
    5 00A7" E1          	pop	hl
  858 00A8" C3 00CE"    	jp	rldir
  859         00AB"     aread	equ	$
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page  15
BIOS3   Z80

  860                       endif
  861 00AB" CD 0149"    	call	poshed		; select disk 'diskno' and position disk head to 'track'
  862 00AE" CD 01AE"    	call	secget		; position head to desired sector
  863 00B1" 21 02EF'    	ld	hl,altbuf	; address of sector buffer
  864 00B4" 1E 89       	ld	e,asecsiz	; number of bytes to read
  865 00B6" F3          	di
  866 00B7" DB 08       blrd1:	in	a,(statin)	; get disk status
  867 00B9" B7          	or	a		; set sign of byte
  868 00BA" FA 00B7"    	jp	m,blrd1		; loop until disk has new byte to read
  869 00BD" DB 0A       	in	a,(dskread)	; read byte of sector
  870 00BF" 77          	ld	(hl),a		; store into buffer
  871 00C0" 23          	inc	hl		; point to next position in buffer
  872 00C1" 1D          	dec	e		; decrement size counter
  873 00C2" C2 00B7"    	jp	nz,blrd1	; if not zero, we need to continue
  874 00C5" 3E 08       	ld	a,cuload	; unload head command
  875 00C7" D3 09       	out	(dskcon),a	; do it
  876 00C9" FB          	ei
  877 00CA" AF          	xor	a		; <A> := 0 means no error
  878 00CB" 01 0080     	ld	bc,csecsiz	; sector size is 128
  879 00CE" F5          rldir:	push	af
  880 00CF" 2A 032A"    	ld	hl,(dmaad)	; destination address
  881 00D2" 11 02F2'    	ld	de,altbuf+3	; address of sector just read
  882 00D5" EB          	ex	de,hl		; prepare for ldir
  883                   
  884         0000          if	banked
  886                       else
  887 00D6" CD 0063'    	call	ldir80
  888                       endif
  889                   
  890 00D9" F1          	pop	af
  891 00DA" C9          	ret
  892                   
  893                   	cseg
  894                   
  895         0000          if	banked
  902                       endif
  903                   
  904                   	dseg
  905                   
  906 00DB"             write:
  907         FFFF          if	nhdisks gt 0
  908 00DB" 3A 0326"    	ld	a,(diskno)	; get disk number
  909 00DE" FE 08       	cp	drives		; compare with number of Altair disks
  910 00E0" DA 011E"    	jp	c,awrite	; carry means we got an Altair disk
  911                   	ldbc	hsecsiz		; sector size can be variable for HDSK Controller
    1 00E3" E5          	push	hl
    2 00E4" 2A 032C"    	ld	hl,(hsecsiz)
    3 00E7" 44          	ld	b,h
    4 00E8" 4D          	ld	c,l
    5 00E9" E1          	pop	hl
  912 00EA" CD 008B"    	call	wldir
  913 00ED" 3E 03       	ld	a,hdskWrite	; otherwise perform hard disk write
  914                   	ldbc	hsecsiz		; sector size can be variable for HDSK Controller
    1 00EF" E5          	push	hl
    2 00F0" 2A 032C"    	ld	hl,(hsecsiz)
    3 00F3" 44          	ld	b,h
    4 00F4" 4D          	ld	c,l
    5 00F5" E1          	pop	hl
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page  16
BIOS3   Z80

  915 00F6" D3 FD       set2:	out	(hdskPort),a	; send command
  916 00F8" 3A 0326"    	ld	a,(diskno)	; get disk number
  917 00FB" D6 08       	sub	drives		; rebase
  918 00FD" D3 FD       	out	(hdskPort),a	; send rebased disk number
  919 00FF" 3A 0329"    	ld	a,(sector)	; get sector
  920 0102" 3D          	dec	a		; rebase to 0
  921 0103" D3 FD       	out	(hdskPort),a	; send rebased sector number
  922 0105" 3A 0327"    	ld	a,(track)	; get lower byte of track
  923 0108" D3 FD       	out	(hdskPort),a	; send lower byte of track
  924 010A" 3A 0328"    	ld	a,(track+1)	; get upper byte of track
  925 010D" D3 FD       	out	(hdskPort),a	; send upper byte of track
  926 010F" 3A 011C"    	ld	a,(dma2)	; get lower byte DMA address
  927 0112" D3 FD       	out	(hdskPort),a	; send lower byte of DMA address
  928 0114" 3A 011D"    	ld	a,(dma2+1)	; get upper byte of DMA address
  929 0117" D3 FD       	out	(hdskPort),a	; send upper byte of DMA address
  930 0119" DB FD       	in	a,(hdskPort)	; perform command and get result
  931 011B" C9          	ret
  932 011C" 02F2'       dma2:	dw	altbuf+3
  933         011E"     awrite	equ	$
  934                       endif
  935 011E" CD 0149"    	call	poshed		; select desired disk and position to desired track
  936 0121" CD 01AE"    	call	secget		; position head to desired sector
  937 0124" 01 0080     	ld	bc,csecsiz	; sector size is 128
  938 0127" CD 008B"    	call	wldir
  939 012A" 3E 80       	ld	a,cwrseq	; command for 'start write enable sequence'
  940 012C" D3 09       	out	(dskcon),a	; do it
  941 012E" F3          	di
  942 012F" 21 02EF'    	ld	hl,altbuf	; point to first byte in local buffer
  943 0132" 06 8A       	ld	b,asecsiz+1	; number of bytes to write (additional byte triggers 'real' write)
  944 0134" DB 08       wready:	in	a,(statin)	; get status
  945 0136" 1F          	rra			; get bit for ready for write
  946 0137" DA 0134"    	jp	c,wready	; loop until ready for write
  947 013A" 7E          	ld	a,(hl)		; byte to write
  948 013B" D3 0A       	out	(dskwrit),a	; write byte
  949 013D" 23          	inc	hl		; point to next byte
  950 013E" 05          	dec	b		; decrement counter of bytes
  951 013F" C2 0134"    	jp	nz,wready	; jp if not done
  952 0142" 3E 08       	ld	a,cuload	; unload head command
  953 0144" D3 09       	out	(dskcon),a	; do it
  954 0146" FB          	ei
  955 0147" AF          	xor	a		; <A> := 0 means no error
  956 0148" C9          	ret
  957                   
  958                   ; Select disk 'diskno' and position disk head to 'track'
  959 0149" CD 01A1"    poshed:	call	calcd		; position altair disk head
  960 014C" 7A          	ld	a,d		; select disk <D>, cur track in <B>
  961 014D" D3 08       	out	(selout),a	; select disk
  962 014F" DB 08       	in	a,(statin)	; get status of selected drive
  963 0151" FE FF       	cp	mall		; ok?
  964 0153" CA 0195"    	jp	z,selerr	; no!
  965 0156" 78          	ld	a,b		; <B> := track of selected disk
  966 0157" FE FF       	cp	track1		; compare with non-existing track
  967 0159" C2 016E"    	jp	nz,alseek	; if a regular track, proceed to seek
  968                   ; position disk on track zero, <A> == 0 at the end
  969 015C" DB 08       dhome:	in	a,(statin)	; position disk to track 0
  970 015E" E6 40       	and	mtzero		; mask for 'head is on track zero'
  971 0160" CA 016D"    	jp	z,posh1		; track zero reached, done
  972 0163" CD 0199"    	call	whmove		; loop until head movement is allowed
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page  17
BIOS3   Z80

  973 0166" 3E 02       	ld	a,cstepot	; command for 'step head out one track'
  974 0168" D3 09       	out	(dskcon),a	; do it
  975 016A" C3 015C"    	jp	dhome		; try again
  976 016D" 47          posh1:	ld	b,a		; <B> := 0 (current track)
  977                   ;Input:		location 'track' contains desired track
  978                   ;		<B> contains current track
  979                   ;Output:	desired track is reached and stored in track array
  980 016E" 3A 0327"    alseek:	ld	a,(track)	; seek to 'track' (cur track in b)
  981 0171" 5F          	ld	e,a		; <E> := desired track
  982 0172" 78          	ld	a,b		; <A> := current track
  983 0173" 93          	sub	e		; <A> := current track - desired track
  984 0174" C8          	ret	z		; we are already at desired track
  985 0175" 5F          	ld	e,a		; e is the number of "step in" or "step out"
  986 0176" DA 017E"    	jp	c,stpin		; current track < desired track
  987 0179" 0E 02       	ld	c,cstepot	; command for step head out one track
  988 017B" C3 0183"    	jp	aseek		; perform steps
  989 017E" 0E 01       stpin:	ld	c,cstepin	; command for step head in one track
  990 0180" 2F          	cpl			; <A> := ~(current track - desired track)
  991 0181" 3C          	inc	a		; <A> := desired track - current track (positive)
  992 0182" 5F          	ld	e,a		; <E> is positive number of tracks to move
  993 0183" CD 0199"    aseek:	call	whmove		; loop until head movement is allowed
  994 0186" 79          	ld	a,c		; get command (step in or step out)
  995 0187" D3 09       	out	(dskcon),a	; perform it
  996 0189" 1D          	dec	e		; next iteration
  997 018A" C2 0183"    	jp	nz,aseek	; loop if not done
  998 018D" CD 01A1"    	call	calcd		; get pointer to 'track' of 'diskno'
  999 0190" 3A 0327"    	ld	a,(track)	; this is the current track
 1000 0193" 77          	ld	(hl),a		; update 'track' of 'diskno'
 1001 0194" C9          	ret
 1002 0195" E1          selerr:	pop	hl		; discard return address
 1003 0196" 3E 01       	ld	a,bioserr	; <A> := 1 means error
 1004 0198" C9          	ret
 1005                   
 1006                   ; loop until head movement is allowed
 1007 0199" DB 08       whmove:	in	a,(statin)	; get status
 1008 019B" E6 02       	and	mhm		; mask for 'head movement allowed'
 1009 019D" C2 0199"    	jp	nz,whmove	; loop until movement allowed
 1010 01A0" C9          	ret
 1011                   
 1012                   ; Input:	<none> - implicit input is location 'diskno'
 1013                   ; Output:	<B> contains the current track of 'diskno'
 1014                   ;		<A>, <D> and <E> contain 'diskno'
 1015                   ;		<HL> points to 'track' of 'diskno'
 1016 01A1" 3A 0326"    calcd:	ld	a,(diskno)	; get 'diskno'
 1017 01A4" 5F          	ld	e,a		; <E> := 'diskno'
 1018 01A5" 21 031E"    	ld	hl,ontrk0
 1019 01A8" 16 00       	ld	d,0
 1020 01AA" 19          	add	hl,de		; <HL> points to 'track' of 'diskno'
 1021 01AB" 46          	ld	b,(hl)		; <B> := 'track' of 'diskno'
 1022 01AC" 53          	ld	d,e		; <E> := 'diskno'
 1023 01AD" C9          	ret
 1024                   
 1025                   ; Input:	'sector' contains desired sector number
 1026                   ; Output:	head is positioned at desired sector
 1027 01AE" 3E 04       secget:	ld	a,cload		; command to load head to drive surface
 1028 01B0" D3 09       	out	(dskcon),a	; do it
 1029 01B2" 3A 0329"    	ld	a,(sector)	; <A> := desired sector
 1030 01B5" 3D          	dec	a		; adjust to range 0..(spt-1)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page  18
BIOS3   Z80

 1031 01B6" 47          	ld	b,a		; <B> := adjusted, desired sector
 1032 01B7" FE 20       	cp	spt		; compare with sectors per track
 1033 01B9" DA 01C5"    	jp	c,seclp2	; desired sector is less than total sectors per track, ok
 1034 01BC" C5          	push	bc		; save sector
 1035 01BD" 11 0559'    	ld	de,secmsg	; prepare error message
 1036 01C0" CD 00F3'    	call	printf		; print it
 1037 01C3" C1          	pop	bc		; restore sector
 1038 01C4" 76          	halt			; not much we can do
 1039 01C5" DB 09       seclp2:	in	a,(secpos)	; get sector position
 1040 01C7" 1F          	rra			; rotate T bit into carry
 1041 01C8" DA 01C5"    	jp	c,seclp2	; loop until sector is positioned to read or write
 1042 01CB" E6 1F       	and	sptmask		; <A> now contains the sector under the head
 1043 01CD" B8          	cp	b		; compare with desired sector
 1044 01CE" C2 01C5"    	jp	nz,seclp2	; repeat if not equal
 1045 01D1" C9          	ret
 1046                   
 1047                   ;Drive Table
 1048                   ;
 1049                   ;The drive table consists of 16 words containing the addresses of the
 1050                   ;Disk Parameter Headers for each logical drive name, A through P, and
 1051                   ;takes the general form:
 1052                   ;
 1053                   ;	drivetable	dw	dpho
 1054                   ;			dw	dphl
 1055                   ;			dw	dph2
 1056                   ;			.
 1057                   ; 			.
 1058                   ;			dw	dphf
 1059                   ;
 1060                   ;If a logical drive does not exist in your system, the corresponding
 1061                   ;entry in the drive table must be zero.
 1062                   ;
 1063                   ;The GENCPM utility accesses the drive table to locate the various disk
 1064                   ;parameter data structures, so that it can determine which system
 1065                   ;configuration to use, and optionally allocate the various buffers
 1066                   ;itself. You must supply a drive table if you want GENCPM to do this
 1067                   ;allocation. If certain addresses in the Disk Parameter Headers
 1068                   ;referenced by this drive table are set to 0FFFEH, GENCPM allocates the
 1069                   ;appropriate data structures and updates the DPH. You can supply the
 1070                   ;drive table even if you have performed your own memory allocation.
 1071                   ;
 1072                   ;
 1073                   ;Disk Parameter Header
 1074                   ;
 1075                   ;In the following figure, which shows the format of the Disk Parameter
 1076                   ;Header, B refers to bits.
 1077                   ;
 1078                   ;	+---+---+--+---+---+---+------+------+----+-----+
 1079                   ;	|XLT|-0-|MF|DPB|CSV|ALV|DIRBCB|DTABCB|HASH|HBANK|
 1080                   ;	+---+---+--+---+---+---+------+------+----+-----+
 1081                   ;	|16B|72B|8B|16B|16B|16B|  16B |  16B | 16B|  8B |
 1082                   ;	+---+---+--+---+---+---+------+------+----+-----+
 1083                   ;
 1084                   ;
 1085                   ;Field		Comments
 1086                   ;XLT	Set the XLT field to the address of the logical to
 1087                   ;	physical sector translation table. If there is no sector
 1088                   ;	translation and the logical and physical sector numbers are the
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page  19
BIOS3   Z80

 1089                   ;	same, set XLT to 0000H. Disk drives with identical sector skew
 1090                   ;	factors can share the same translation table.
 1091                   ;
 1092                   ;	XLT is the value passed to SECTRN in registers DE. Usually the
 1093                   ;	translation table consists of one byte per physical sector.
 1094                   ;	Generally, it is advisable to keep the number of physical
 1095                   ;	sectors per logical track to a reasonable value to prevent the
 1096                   ;	translation table from becoming too large. In the case of disks
 1097                   ;	with multiple heads, you can compute the head number from the
 1098                   ;	track address rather than the sector address.
 1099                   ;
 1100                   ;-0-	These 72 bits (9 bytes) of zeroes are the scratch
 1101                   ;	area the BDOS uses to maintain various parameters associated
 1102                   ;	with the drive.
 1103                   ;
 1104                   ;MF	MF is the Media Flag. The BDOS resets MF to zero when
 1105                   ;	the drive is logged in. The BIOS can set this flag and @MEDIA in
 1106                   ;	the SCB to 0FFH if it detects that a drive door has been opened.
 1107                   ;	If the flag is set to 0FFH, the BDOS checks for a media change
 1108                   ;	prior to performing the next BDOS file operation on that drive.
 1109                   ;	If the BDOS determines that the drive contains a new volume, the
 1110                   ;	BDOS performs a login on that drive, and resets the MF flag to
 1111                   ;	00H. Note that the BDOS checks this flag only when a system call
 1112                   ;	is made, and not during an operation. Usually, this flag is used
 1113                   ;	only by systems that support door-open interrupts.
 1114                   ;
 1115                   ;DPB	Set the DPB field to the address of a Disk Parameter Block
 1116                   ;	that describes the characteristics of the disk drive. Several
 1117                   ;	Disk Parameter Headers can address the same Disk Parameter Block
 1118                   ;	if their drive characteristics are identical. The Disk Parameter
 1119                   ;	Block is described below
 1120                   ;
 1121                   ;CSV	CSV is the address of a scratchpad area used to detect
 1122                   ;	changed disks. This address must be different for each removable
 1123                   ;	media Disk Parameter Header. There must be one byte for every 4
 1124                   ;	directory entries (or 128 bytes of directory). In other words,
 1125                   ;	length(CSV) = (DRM/4)+l. (See Table 3-3 for an explanation of
 1126                   ;	the DRM field.) If the drive is permanently mounted, set the CKS
 1127                   ;	variable in the DPB to 8000H and set CSV to 0000H. This way, no
 1128                   ;	storage is reserved for a checksum vector. The checksum vector
 1129                   ;	may be located in common memory or in Bank 0. Set CSV to 0FFFEH
 1130                   ;	for GENCPM to set up the checksum vector.
 1131                   ;
 1132                   ;ALV	ALV is the address of the scratchpad area called the
 1133                   ;	allocation vector, which the BDOS uses to keep disk storage
 1134                   ;	allocation information. This area must be unique for each drive.
 1135                   ;	The allocation vector usually requires 2 bits for each block on
 1136                   ;	the drive. Thus, length(ALV) = (DSM/4) + 2. In the nonbanked
 1137                   ;	version of CP/M 3, you can optionally specify that GENCPM
 1138                   ;	reserve only one bit in the allocation vector per block on the
 1139                   ;	drive. In this case, length(ALV) = (DSM/8) + The GENCPM option
 1140                   ;	to use single-bit allocation vectors is provided in the
 1141                   ;	nonbanked version of CP/M 3 because additional memory is
 1142                   ;	required by the double-bit allocation vector. This option
 1143                   ;	applies to all drives on the system. With double-bit allocation
 1144                   ;	vectors, CP/M 3 automatically frees, at every system warm start,
 1145                   ;	all file blocks that are not permanently recorded in the
 1146                   ;	directory. Note that file space allocated to a file is not
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page  20
BIOS3   Z80

 1147                   ;	permanently recorded in a directory unless the file is closed.
 1148                   ;	Therefore, the allocation vectors in memory can indicate that
 1149                   ;	space is allocated although directory records indicate that
 1150                   ;	space is free for allocation. With single-bit allocation
 1151                   ;	vectors, CP/M 3 requires that a drive be reset before this space
 1152                   ;	can be reclaimed. Because it increases performance, CP/M 3 does
 1153                   ;	not reset disks at system warm start. Thus, with single-bit
 1154                   ;	allocation vectors, if you do not reset the disk system, DIR and
 1155                   ;	SHOW can report an inaccurate amount of free space. With
 1156                   ;	single-bit allocation vectors, the user must type a CTRL-C at
 1157                   ;	the system prompt to (continued) reset the disk system to ensure
 1158                   ;	accurate reporting of free space. Set ALV to 0FFFEH for GENCPM
 1159                   ;	to automatically assign space for the allocation vector, single-
 1160                   ;	or double-bit, during system generation. In the nonbanked
 1161                   ;	system, GENCPM prompts for the type of allocation vector. In the
 1162                   ;	banked system, the allocation vector is always double-bit and
 1163                   ;	can reside in common memory or Bank 0. When GENCPM automatically
 1164                   ;	assigns space for the allocation vector (ALV = OFFFEH) , it
 1165                   ;	places the allocation vector in Bank 0.
 1166                   ;
 1167                   ;DIRBCB	Set DIRBCB to the address of a single directory Buffer
 1168                   ;	Control Block (BCB) in an unbanked system. Set DIRBCB to the
 1169                   ;	address of a BCB list head in a banked system. Set DIRBCB to
 1170                   ;	OFFFEH for GENCPM to set up the DIRBCB field. The BDOS uses
 1171                   ;	directory buffers for all accesses of the disk directory.
 1172                   ;	Several DPHs can refer to the same directory BCB or BCB list
 1173                   ;	head; or, each DPH can reference an independent BCB or BCB list
 1174                   ;	head.
 1175                   ;
 1176                   ;DTABCB	Set DTABCB to the address of a single data BCB in an unbanked system.
 1177                   ;	Set DTABCB to the address of a data BCB list head in a banked
 1178                   ;	system. Set DTABCB to OFFFEH for GENCPM to set up the DTABCB
 1179                   ;	field. The BDOS uses data buffers to hold physical sectors so
 1180                   ;	that it can block and deblock logical 128-byte records. If the
 1181                   ;	physical record size of the media associated with a DPH is 128
 1182                   ;	bytes, you can set the DTABCB field of the DPH to 0FFFFH,
 1183                   ;	because in this case, the BDOS does not use a data buffer.
 1184                   ;
 1185                   ;HASH	HASH contains the address of the optional directory hashing table
 1186                   ;	associated with a DPH. Set HASH to 0FFFFH to disable directory
 1187                   ;	hashing. Set RASH to OFFFEH to make directory hashing on the
 1188                   ;	drive a (continued) GENCPM option. Each DPH using hashing must
 1189                   ;	reference a unique hash table. If a hash table is supplied, it
 1190                   ;	must be 4*(DRM+l) bytes long, where DRM is one less than the
 1191                   ;	length of the directory. In other words, the hash table must
 1192                   ;	contain four bytes for each directory entry of the disk.
 1193                   ;
 1194                   ;HBANK	Set HBANK to the bank number of the hash table. HBANK is
 1195                   ;	not used in unbanked systems and should be set to zero. The hash
 1196                   ;	tables can be contained in the system bank, common memory, or
 1197                   ;	any alternate bank except Bank 1, because hash tables cannot be
 1198                   ;	located in the Transient Program Area. GENCPM automatically sets
 1199                   ;	HBANK when HASH is set to 0FFFEH.
 1200                   ;
 1201                   ;
 1202                   ;Disk Parameter Block
 1203                   ;
 1204                   ;The following figure shows the format of the Disk Parameter Block, where
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page  21
BIOS3   Z80

 1205                   ;B refers to bits.
 1206                   ;
 1207                   ;		+---+---+---+---+---+---+---+---+---+---+---+---+
 1208                   ;		|SPT|BSH|BLM|EXM|DSM|DRM|AL0|AL1|CKS|OFF|PSH|PHM|
 1209                   ;		+---+---+---+---+---+---+---+---+---+---+---+---+
 1210                   ;		|16B| 8B| 8B| 8B|16B|16B| 8B| 8B|16B|16B| 8B| 8B|
 1211                   ;		+---+---+---+---+---+---+---+---+---+---+---+---+
 1212                   ;
 1213                   ;Field		Comments
 1214                   ;SPT		Set SPT to the total number of 128-byte logical
 1215                   ;		records per track.
 1216                   ;
 1217                   ;BSH		Data allocation block shift factor. The value of BSH
 1218                   ;		is determined by the data block allocation size.
 1219                   ;
 1220                   ;BLM		Block mask. The value of BLM is determined by the
 1221                   ;		data block allocation size.
 1222                   ;
 1223                   ;EXM		Extent mask determined by the data block allocation
 1224                   ;		size and the number of disk blocks.
 1225                   ;
 1226                   ;DSM		Determines the total storage capacity of the disk
 1227                   ;		drive. DSM is one less than the total number of blocks
 1228                   ;		on the drive.
 1229                   ;
 1230                   ;DRM		Total number of directory entries minus one that can
 1231                   ;		be stored on this drive. The directory requires 32 bytes
 1232                   ;		per entry.
 1233                   ;
 1234                   ;ALO, AL1	Determine reserved directory blocks. See Figure 3-4 for
 1235                   ;		more information.
 1236                   ;
 1237                   ;CKS		The size of the directory check vector, (DRM/4)+1.
 1238                   ;		Set bit 15 of CKS to 1 if the drive is permanently
 1239                   ;		mounted. Set CKS to 8000H to indicate that the drive is
 1240                   ;		permanently mounted and directory checksumming is not
 1241                   ;		required. Note: full directory checksumming is required
 1242                   ;		on removable media to support the automatic login
 1243                   ;		feature of CP/M 3.
 1244                   ;
 1245                   ;OFF		The number of reserved tracks at the beginning of the
 1246                   ;		logical disk. 0FF is the track on which the directory
 1247                   ;		starts.
 1248                   ;
 1249                   ;PSH		Specifies the physical record shift factor.
 1250                   ;
 1251                   ;PHM		Specifies the physical record mask.
 1252                   ;
 1253                   ;CP/M allocates disk space in a unit called a block. Blocks are also
 1254                   ;called allocation units, or clusters. BLS is the number of bytes in a
 1255                   ;block. The block size can be 1024, 2048, 4096, 8192, or 16384 (decimal)
 1256                   ;bytes.
 1257                   ;
 1258                   ;A large block size decreases the size of the allocation vectors but can
 1259                   ;result in wasted disk space. A smaller block size increases the size of
 1260                   ;the allocation vectors because there are more blocks on the same size
 1261                   ;disk.
 1262                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page  22
BIOS3   Z80

 1263                   ;There is a restriction on the block size. If the block size is 1024,
 1264                   ;there cannot be more than 255 blocks present on a logical drive. In
 1265                   ;other words, if the disk is larger than 256K, it is necessary to use at
 1266                   ;least 2048 byte blocks.
 1267                   ;
 1268                   ;The value of BLS is not a field in the Disk Parameter Block; rather, it
 1269                   ;is derived from the values of BSH and BLM as given in the following
 1270                   ;table.
 1271                   ;
 1272                   ;	BLS	BSH	BLM
 1273                   ;	1,024	3	7
 1274                   ;	2,048	4	15
 1275                   ;	4,096	5	31
 1276                   ;	8,192	6	63
 1277                   ;	16,384	7	127
 1278                   ;
 1279                   ;The block mask, BLM, equals one less than the number of 128- byte
 1280                   ;records in an allocation unit, (BLS/128 - 1), or (2**BSH)-l.
 1281                   ;
 1282                   ;The value of the Block Shift Factor, BSH, is determined by the data
 1283                   ;block allocation size. The Block Shift Factor (BSH) equals the logarithm
 1284                   ;base two of the block size in 128-byte records, or LOG2 (BLS/128) ,
 1285                   ;where LOG2 represents the binary logarithm function.
 1286                   ;
 1287                   ;The value of EXM depends upon both the BLS and whether the DSM value is
 1288                   ;less than 256 or greater than 255, as shown in the following table.
 1289                   ;
 1290                   ;	BLS	EXM values
 1291                   ;		DSM<256		DSM>255
 1292                   ;	1,024	0		N/A
 1293                   ;	2,048	1		0
 1294                   ;	4,096	3		1
 1295                   ;	8,192	7		3
 1296                   ;	16,384	15		7
 1297                   ;
 1298                   ;The value of EXM is one less than the maximum number of 16K extents per
 1299                   ;FCB. Set EXM to zero if you want media compatibility with an extended
 1300                   ;CP/M 1.4 system. This only applies to double-density CP/M 1.4 systems,
 1301                   ;with disk sizes greater than 256K bytes. It is preferable to copy
 1302                   ;double-density 1.4 disks to single-density, then reformat them and
 1303                   ;recreate them with the CP/M 3 system, because CP/M 3 uses directory
 1304                   ;entries more effectively than CP/M 1.4.
 1305                   ;
 1306                   ;DSM is one less than the total number of blocks on the drive. DSM must
 1307                   ;be less than or equal to 7FFFH. If the disk uses 1024 byte blocks
 1308                   ;(BSH=3, BLM=7), DSM must be less than or equal to OOFFH. The product
 1309                   ;BLS*(DSM+l) is the total number of bytes the drive holds and must be
 1310                   ;within the capacity of the physical disk. It does not include the
 1311                   ;reserved operating system tracks.
 1312                   ;
 1313                   ;The DRM entry is one less than the total number of 32-byte directory
 1314                   ;entries, and is a 16-bit value. DRM must be less than or equal to
 1315                   ;(BLS/32 * 16) - 1. DRM determines the values of AL0 and ALI. The two
 1316                   ;fields AL0 and ALI can together be considered a string of 16 bits, as
 1317                   ;shown in the following figure.
 1318                   ;
 1319                   ;	+-----------------------+-----------------------+
 1320                   ;	|	AL0		|	AL1		|
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page  23
BIOS3   Z80

 1321                   ;	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
 1322                   ;	|00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|
 1323                   ;	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
 1324                   ;
 1325                   ;Position 00 corresponds to the high-order bit of the byte labeled AL0,
 1326                   ;and position 15 corresponds to the low-order bit of the byte labeled
 1327                   ;ALI. Each bit position reserves a data block for a number of directory
 1328                   ;entries, thus allowing a maximum of 16 data blocks to be assigned for
 1329                   ;directory entries. Bits are assigned starting at 00 and filled to the
 1330                   ;right until position 15. AL0 and ALI overlay the first two bytes of the
 1331                   ;allocation vector for the associated drive.
 1332                   ;
 1333                   ;The following table shows DRM maximums for the various block sizes.
 1334                   ;
 1335                   ;	BLS	Directory Entries	Maximum DRM
 1336                   ;	1,024	 32 * reserved blocks	511
 1337                   ;	2,048	 64 * reserved blocks	1,023
 1338                   ;	4,096	128 * reserved blocks	2,047
 1339                   ;	8,192	256 * reserved blocks	4,095
 1340                   ;	16,384	512 * reserved blocks	8,191
 1341                   ;
 1342                   ;If DRM = 127 (128 directory entries) , and BLS = 1024, there are 32
 1343                   ;directory entries per block, requiring 4 reserved blocks. In this case,
 1344                   ;the 4 high-order bits of AL0 are set, resulting in the values AL0 = OF0H
 1345                   ;and AL1 = 00H. The maximum directory allocation is 16 blocks where the
 1346                   ;block size is determined by BSH and BLM.
 1347                   ;
 1348                   ;The OFF field determines the number of tracks that are skipped at the
 1349                   ;beginning of the physical disk. It can be used as a mechanism for
 1350                   ;skipping reserved operating system tracks, which on system disks contain
 1351                   ;the Cold Boot Loader, CPMLDR, and possibly the CCP. It is also used to
 1352                   ;partition a large disk into smaller segmented sections.
 1353                   ;
 1354                   ;PSH and PHM determine the physical sector size of the disk. All disk I/O
 1355                   ;is in terms of the physical sector size. Set PSH and PSM to zero if the
 1356                   ;BIOS is blocking and deblocking instead of the BDOS.
 1357                   ;
 1358                   ;PSH specifies the physical record shift factor, ranging from 0 to 5,
 1359                   ;corresponding to physical record sizes of 128, 256, 512, 1K, 2K, or 4K
 1360                   ;bytes. It is equal to the logarithm base two of the physical record size
 1361                   ;divided by 128, or LOG2(sector-size/128). See the table below for PSH
 1362                   ;values.
 1363                   ;
 1364                   ;PHM specifies the physical record mask, ranging from 0 to 31,
 1365                   ;corresponding to physical record sizes of 128, 256, 512, 1K, 2K, or 4K
 1366                   ;bytes. It is equal to one less than the sector size divided by 128, or,
 1367                   ;(sector-size/128)-l. See the following table for PHM values.
 1368                   ;
 1369                   ;	Sector size	PSH	PHM
 1370                   ;	128		0	0
 1371                   ;	256		1	1
 1372                   ;	512		2	3
 1373                   ;	1,024		3	7
 1374                   ;	2,048		4	15
 1375                   ;	4,096		5	31
 1376                   ;
 1377                   
 1378                   	cseg
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page  24
BIOS3   Z80

 1379                   
 1380         FFFE      gencpm	equ	0fffeh
 1381                   
 1382                   dpb	macro	?spt,?bsh,?blm,?exm,?dsm,?drm1,?al0,?cks,?rstk,?psh,?phm
 1383                   	dw	?spt	; SPT
 1384                   	db	?bsh	; BSH
 1385                   	db	?blm	; BLM
 1386                   	db	?exm	; EXM
 1387                   	dw	?dsm	; DSM
 1388                   	dw	?drm1-1	; DRM
 1389                   	db	?al0	; AL0
 1390                   	db	0	; AL1
 1391                   	dw	?cks	; CKS
 1392                   	dw	?rstk	; OFF
 1393                   	db	?psh ;0	; PSH
 1394                   	db	?phm ;0	; PHM
 1395                   	endm
 1396                   
 1397                   dph	macro	?xlt,?dpb,?csv
 1398                   	dw	?xlt			; XLT
 1399                   	db	0,0,0,0,0,0,0,0,0	; -0-
 1400                   	db	0			; MF
 1401                   	dw	?dpb			; DPB
 1402                   	dw	?csv			; CSV
 1403                   	dw	gencpm			; ALV
 1404                   	dw	gencpm			; DIRBCB
 1405                   	dw	gencpm			; DTABCB
 1406                   	dw	0ffffh			; HASH
 1407                   	db	0			; HBANK
 1408                   	endm
 1409                   
 1410                   dtblh	macro	prefix,val
 1411                   	dw	prefix&val
 1412                   	endm
 1413                   
 1414                   dtbl	macro	base,n,prefix
 1415                   cnt	defl	base
 1416                   	rept	n
 1417                   	dtblh	prefix,%cnt
 1418                   cnt	defl	cnt + 1
 1419                   	endm
 1420                   	endm
 1421                   
 1422                   maklab	macro	prefix,val
 1423                   prefix&val:
 1424                   	endm
 1425                   
 1426 0269'             dtbla:	dtbl	0,8,dph			; 8 floppy headers
    1 0269' 01D2"       	dw	dph0
    1 026B' 01EB"       	dw	dph1
    1 026D' 0204"       	dw	dph2
    1 026F' 021D"       	dw	dph3
    1 0271' 0236"       	dw	dph4
    1 0273' 024F"       	dw	dph5
    1 0275' 0268"       	dw	dph6
    1 0277' 0281"       	dw	dph7
 1427                   	dtbl	8,nhdisks,dph		; nhdisks hard disk headers
    1 0279' 029A"       	dw	dph8
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page  25
BIOS3   Z80

    1 027B' 02B3"       	dw	dph9
    1 027D' 02CC"       	dw	dph10
    1 027F' 02E5"       	dw	dph11
 1428                   	rept	8-nhdisks		; rest (8-nhdisks) is 0
 1429                   	dw	0
 1430                   	endm
    1 0281' 0000        	dw	0
    1 0283' 0000        	dw	0
    1 0285' 0000        	dw	0
    1 0287' 0000        	dw	0
 1431                   
 1432 0289'             dpbX:	dpb	32,4,15,0,01efh, 256, 0f0h,40h,6,0,0
    1 0289' 0020        	dw	32	; SPT
    2 028B' 04          	db	4	; BSH
    3 028C' 0F          	db	15	; BLM
    4 028D' 00          	db	0	; EXM
    5 028E' 01EF        	dw	01efh	; DSM
    6 0290' 00FF        	dw	256-1	; DRM
    7 0292' F0          	db	0f0h	; AL0
    8 0293' 00          	db	0	; AL1
    9 0294' 0040        	dw	40h	; CKS
   10 0296' 0006        	dw	6	; OFF
   11 0298' 00          	db	0 ;0	; PSH
   12 0299' 00          	db	0 ;0	; PHM
 1433 029A'             dpbN:	dpb	32,3, 7,0,00e3h, 256, 0ffh,40h,6,0,0
    1 029A' 0020        	dw	32	; SPT
    2 029C' 03          	db	3	; BSH
    3 029D' 07          	db	7	; BLM
    4 029E' 00          	db	0	; EXM
    5 029F' 00E3        	dw	00e3h	; DSM
    6 02A1' 00FF        	dw	256-1	; DRM
    7 02A3' FF          	db	0ffh	; AL0
    8 02A4' 00          	db	0	; AL1
    9 02A5' 0040        	dw	40h	; CKS
   10 02A7' 0006        	dw	6	; OFF
   11 02A9' 00          	db	0 ;0	; PSH
   12 02AA' 00          	db	0 ;0	; PHM
 1434                   
 1435                   ;dpb0:	dpb	32,5,31,1,2047-6,1024,0ffh,8000h,6,2,3	; AltairZ80 HDSK Image
 1436                   ;dpb1:	dpb	32,3, 7,0,127,63,0C0h,0h,0,2,3		; 128K FLASH Disk Image
 1437                   ;dpb2:	dpb	72,4, 15,0,711,255,0F0h,0h,2,2,3	; P112
 1438                   ;dpb3:	dpb	36,4, 15,0,354,127,0C0h,0020h,2,2,3	; Super-I/O 720K
 1439                   
 1440         0000      cnt	defl	0
 1441                   	rept	nhdisks
 1442                   	maklab	dpb,%cnt
 1443                   cnt	defl	cnt+1
 1444                   	dpb	32,5,31,1,2047-6,1024,0ffh,0100h,6,2,3	; AltairZ80 HDSK Image
 1445                   	endm
    1 02AB' 0020        	dw	32	; SPT
    2 02AD' 05          	db	5	; BSH
    3 02AE' 1F          	db	31	; BLM
    4 02AF' 01          	db	1	; EXM
    5 02B0' 07F9        	dw	2047-6	; DSM
    6 02B2' 03FF        	dw	1024-1	; DRM
    7 02B4' FF          	db	0ffh	; AL0
    8 02B5' 00          	db	0	; AL1
    9 02B6' 0100        	dw	0100h	; CKS
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page  26
BIOS3   Z80

   10 02B8' 0006        	dw	6	; OFF
   11 02BA' 02          	db	2 ;0	; PSH
   12 02BB' 03          	db	3 ;0	; PHM
    1 02BC' 0020        	dw	32	; SPT
    2 02BE' 05          	db	5	; BSH
    3 02BF' 1F          	db	31	; BLM
    4 02C0' 01          	db	1	; EXM
    5 02C1' 07F9        	dw	2047-6	; DSM
    6 02C3' 03FF        	dw	1024-1	; DRM
    7 02C5' FF          	db	0ffh	; AL0
    8 02C6' 00          	db	0	; AL1
    9 02C7' 0100        	dw	0100h	; CKS
   10 02C9' 0006        	dw	6	; OFF
   11 02CB' 02          	db	2 ;0	; PSH
   12 02CC' 03          	db	3 ;0	; PHM
    1 02CD' 0020        	dw	32	; SPT
    2 02CF' 05          	db	5	; BSH
    3 02D0' 1F          	db	31	; BLM
    4 02D1' 01          	db	1	; EXM
    5 02D2' 07F9        	dw	2047-6	; DSM
    6 02D4' 03FF        	dw	1024-1	; DRM
    7 02D6' FF          	db	0ffh	; AL0
    8 02D7' 00          	db	0	; AL1
    9 02D8' 0100        	dw	0100h	; CKS
   10 02DA' 0006        	dw	6	; OFF
   11 02DC' 02          	db	2 ;0	; PSH
   12 02DD' 03          	db	3 ;0	; PHM
    1 02DE' 0020        	dw	32	; SPT
    2 02E0' 05          	db	5	; BSH
    3 02E1' 1F          	db	31	; BLM
    4 02E2' 01          	db	1	; EXM
    5 02E3' 07F9        	dw	2047-6	; DSM
    6 02E5' 03FF        	dw	1024-1	; DRM
    7 02E7' FF          	db	0ffh	; AL0
    8 02E8' 00          	db	0	; AL1
    9 02E9' 0100        	dw	0100h	; CKS
   10 02EB' 0006        	dw	6	; OFF
   11 02ED' 02          	db	2 ;0	; PSH
   12 02EE' 03          	db	3 ;0	; PHM
 1446                   
 1447         0000          if	banked
 1451                       endif
 1452                   
 1453 02EF'   020A      altbuf:	ds	asecsiz+1+384
 1454                   ;		   12345678123
 1455 04F9' 01 43 43 50 ccpFCB:	db	1,'CCP     COM',0,0,0,0
 1456 0509' 00 00 00 00 	db	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 1457 0519' 00 00 00    fcbNr:	db	0,0,0
 1458 051C' 0D 0A 42 49 opnmsg:	db	cr, lf, 'BIOS can''t open CCP.COM $'
 1459 0537' 0D 0A 42 49 iomsg:	db	cr, lf, 'BIOS I/O error reading CCP.COM $'
 1460 0559' 0D 0A 43 61 secmsg:	db	cr, lf, 'Cannot find sector in register <B>', cr, lf, '$'
 1461         0000          if	banked
 1477                       endif
 1478 0580' 0D 0A 42 49 versio:	db	cr, lf, 'BIOS3'
 1479                   
 1480         0000          if	banked
 1482                       endif
 1483                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page  27
BIOS3   Z80

 1484 0587' 20 66 6F 72 	db	' for SIMH Altair V-1.27, '
 1485                   
 1486         FFFF          if	nhdisks gt 0
 1487 05A0' 34          	db	'0' + nhdisks
 1488 05A1' 20 48 44 2C 	db	' HD, '
 1489                       endif
 1490                   
 1491 05A6' 30 32 2D 4D 	db  '02-May-2009', cr, lf, cr, lf, '$'
 1492                   
 1493 05B6' 43 52 54 20 ctbla:	db 'CRT   '	; device 0
 1494 05BC' 03          	db mb$in$out
 1495 05BD' 00          	db baud$none
 1496 05BE' 50 54 50 20 	db 'PTP   '	; device 1
 1497 05C4' 02          	db mb$output
 1498 05C5' 00          	db baud$none
 1499 05C6' 50 54 52 20 	db 'PTR   '	; device 2
 1500 05CC' 01          	db mb$input
 1501 05CD' 00          	db baud$none
 1502 05CE' 00          	db 0		; table terminator
 1503                   
 1504                   	dseg
 1505                   
 1506 01D2"             dph0:	dph	atrans,dpbX,gencpm
    1 01D2" 02FE"       	dw	atrans			; XLT
    2 01D4" 00 00 00 00 	db	0,0,0,0,0,0,0,0,0	; -0-
    3 01DD" 00          	db	0			; MF
    4 01DE" 0289'       	dw	dpbX			; DPB
    5 01E0" FFFE        	dw	gencpm			; CSV
    6 01E2" FFFE        	dw	gencpm			; ALV
    7 01E4" FFFE        	dw	gencpm			; DIRBCB
    8 01E6" FFFE        	dw	gencpm			; DTABCB
    9 01E8" FFFF        	dw	0ffffh			; HASH
   10 01EA" 00          	db	0			; HBANK
 1507 01EB"             dph1:	dph	atrans,dpbX,gencpm
    1 01EB" 02FE"       	dw	atrans			; XLT
    2 01ED" 00 00 00 00 	db	0,0,0,0,0,0,0,0,0	; -0-
    3 01F6" 00          	db	0			; MF
    4 01F7" 0289'       	dw	dpbX			; DPB
    5 01F9" FFFE        	dw	gencpm			; CSV
    6 01FB" FFFE        	dw	gencpm			; ALV
    7 01FD" FFFE        	dw	gencpm			; DIRBCB
    8 01FF" FFFE        	dw	gencpm			; DTABCB
    9 0201" FFFF        	dw	0ffffh			; HASH
   10 0203" 00          	db	0			; HBANK
 1508 0204"             dph2:	dph	atrans,dpbX,gencpm
    1 0204" 02FE"       	dw	atrans			; XLT
    2 0206" 00 00 00 00 	db	0,0,0,0,0,0,0,0,0	; -0-
    3 020F" 00          	db	0			; MF
    4 0210" 0289'       	dw	dpbX			; DPB
    5 0212" FFFE        	dw	gencpm			; CSV
    6 0214" FFFE        	dw	gencpm			; ALV
    7 0216" FFFE        	dw	gencpm			; DIRBCB
    8 0218" FFFE        	dw	gencpm			; DTABCB
    9 021A" FFFF        	dw	0ffffh			; HASH
   10 021C" 00          	db	0			; HBANK
 1509 021D"             dph3:	dph	atrans,dpbX,gencpm
    1 021D" 02FE"       	dw	atrans			; XLT
    2 021F" 00 00 00 00 	db	0,0,0,0,0,0,0,0,0	; -0-
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page  28
BIOS3   Z80

    3 0228" 00          	db	0			; MF
    4 0229" 0289'       	dw	dpbX			; DPB
    5 022B" FFFE        	dw	gencpm			; CSV
    6 022D" FFFE        	dw	gencpm			; ALV
    7 022F" FFFE        	dw	gencpm			; DIRBCB
    8 0231" FFFE        	dw	gencpm			; DTABCB
    9 0233" FFFF        	dw	0ffffh			; HASH
   10 0235" 00          	db	0			; HBANK
 1510 0236"             dph4:	dph	atrans,dpbX,gencpm
    1 0236" 02FE"       	dw	atrans			; XLT
    2 0238" 00 00 00 00 	db	0,0,0,0,0,0,0,0,0	; -0-
    3 0241" 00          	db	0			; MF
    4 0242" 0289'       	dw	dpbX			; DPB
    5 0244" FFFE        	dw	gencpm			; CSV
    6 0246" FFFE        	dw	gencpm			; ALV
    7 0248" FFFE        	dw	gencpm			; DIRBCB
    8 024A" FFFE        	dw	gencpm			; DTABCB
    9 024C" FFFF        	dw	0ffffh			; HASH
   10 024E" 00          	db	0			; HBANK
 1511 024F"             dph5:	dph	atrans,dpbX,gencpm
    1 024F" 02FE"       	dw	atrans			; XLT
    2 0251" 00 00 00 00 	db	0,0,0,0,0,0,0,0,0	; -0-
    3 025A" 00          	db	0			; MF
    4 025B" 0289'       	dw	dpbX			; DPB
    5 025D" FFFE        	dw	gencpm			; CSV
    6 025F" FFFE        	dw	gencpm			; ALV
    7 0261" FFFE        	dw	gencpm			; DIRBCB
    8 0263" FFFE        	dw	gencpm			; DTABCB
    9 0265" FFFF        	dw	0ffffh			; HASH
   10 0267" 00          	db	0			; HBANK
 1512 0268"             dph6:	dph	atrans,dpbX,gencpm
    1 0268" 02FE"       	dw	atrans			; XLT
    2 026A" 00 00 00 00 	db	0,0,0,0,0,0,0,0,0	; -0-
    3 0273" 00          	db	0			; MF
    4 0274" 0289'       	dw	dpbX			; DPB
    5 0276" FFFE        	dw	gencpm			; CSV
    6 0278" FFFE        	dw	gencpm			; ALV
    7 027A" FFFE        	dw	gencpm			; DIRBCB
    8 027C" FFFE        	dw	gencpm			; DTABCB
    9 027E" FFFF        	dw	0ffffh			; HASH
   10 0280" 00          	db	0			; HBANK
 1513 0281"             dph7:	dph	atrans,dpbN,gencpm
    1 0281" 02FE"       	dw	atrans			; XLT
    2 0283" 00 00 00 00 	db	0,0,0,0,0,0,0,0,0	; -0-
    3 028C" 00          	db	0			; MF
    4 028D" 029A'       	dw	dpbN			; DPB
    5 028F" FFFE        	dw	gencpm			; CSV
    6 0291" FFFE        	dw	gencpm			; ALV
    7 0293" FFFE        	dw	gencpm			; DIRBCB
    8 0295" FFFE        	dw	gencpm			; DTABCB
    9 0297" FFFF        	dw	0ffffh			; HASH
   10 0299" 00          	db	0			; HBANK
 1514                   
 1515                   dpbx	macro	prefix,val
 1516                   	dph	0,prefix&val,gencpm
 1517                   	endm
 1518                   
 1519         0000      cnt1	defl	0
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page  29
BIOS3   Z80

 1520         0008      cnt2	defl	8
 1521                   	rept	nhdisks
 1522                   	maklab	dph,%cnt2
 1523                   	dpbx	dpb,%cnt1
 1524                   cnt1	defl	cnt1+1
 1525                   cnt2	defl	cnt2+1
 1526                   	endm
    1 029A" 0000        	dw	0			; XLT
    2 029C" 00 00 00 00 	db	0,0,0,0,0,0,0,0,0	; -0-
    3 02A5" 00          	db	0			; MF
    4 02A6" 02AB'       	dw	dpb0			; DPB
    5 02A8" FFFE        	dw	gencpm			; CSV
    6 02AA" FFFE        	dw	gencpm			; ALV
    7 02AC" FFFE        	dw	gencpm			; DIRBCB
    8 02AE" FFFE        	dw	gencpm			; DTABCB
    9 02B0" FFFF        	dw	0ffffh			; HASH
   10 02B2" 00          	db	0			; HBANK
    1 02B3" 0000        	dw	0			; XLT
    2 02B5" 00 00 00 00 	db	0,0,0,0,0,0,0,0,0	; -0-
    3 02BE" 00          	db	0			; MF
    4 02BF" 02BC'       	dw	dpb1			; DPB
    5 02C1" FFFE        	dw	gencpm			; CSV
    6 02C3" FFFE        	dw	gencpm			; ALV
    7 02C5" FFFE        	dw	gencpm			; DIRBCB
    8 02C7" FFFE        	dw	gencpm			; DTABCB
    9 02C9" FFFF        	dw	0ffffh			; HASH
   10 02CB" 00          	db	0			; HBANK
    1 02CC" 0000        	dw	0			; XLT
    2 02CE" 00 00 00 00 	db	0,0,0,0,0,0,0,0,0	; -0-
    3 02D7" 00          	db	0			; MF
    4 02D8" 02CD'       	dw	dpb2			; DPB
    5 02DA" FFFE        	dw	gencpm			; CSV
    6 02DC" FFFE        	dw	gencpm			; ALV
    7 02DE" FFFE        	dw	gencpm			; DIRBCB
    8 02E0" FFFE        	dw	gencpm			; DTABCB
    9 02E2" FFFF        	dw	0ffffh			; HASH
   10 02E4" 00          	db	0			; HBANK
    1 02E5" 0000        	dw	0			; XLT
    2 02E7" 00 00 00 00 	db	0,0,0,0,0,0,0,0,0	; -0-
    3 02F0" 00          	db	0			; MF
    4 02F1" 02DE'       	dw	dpb3			; DPB
    5 02F3" FFFE        	dw	gencpm			; CSV
    6 02F5" FFFE        	dw	gencpm			; ALV
    7 02F7" FFFE        	dw	gencpm			; DIRBCB
    8 02F9" FFFE        	dw	gencpm			; DTABCB
    9 02FB" FFFF        	dw	0ffffh			; HASH
   10 02FD" 00          	db	0			; HBANK
 1527                   
 1528                   ; speedball (copylib) skewtable
 1529 02FE" 01 12 03 14 atrans:	db	01,18,03,20,05,22,07,24
 1530 0306" 09 1A 0B 1C 	db	09,26,11,28,13,30,15,32
 1531 030E" 11 02 13 04 	db	17,02,19,04,21,06,23,08
 1532 0316" 19 0A 1B 0C 	db	25,10,27,12,29,14,31,16
 1533                   
 1534                   ; Position of disk drive head
 1535 031E" FF          ontrk0:	db	track1	; current track# drive 0 (logical 1)
 1536 031F" FF          	db	track1	; current track# drive 1 (logical 2)
 1537 0320" FF          	db	track1	; current track# drive 2 (logical 3)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.32 Page  30
BIOS3   Z80

 1538 0321" FF          	db	track1	; current track# drive 3 (logical 4)
 1539 0322" FF          	db	track1	; current track# drive 4 (logical 5)
 1540 0323" FF          	db	track1	; current track# drive 5 (logical 6)
 1541 0324" FF          	db	track1	; current track# drive 6 (logical 7)
 1542 0325" FF          	db	track1	; current track# drive 7 (logical 8)
 1543 0326" 00          diskno:	db	0
 1544 0327" 0000        track:	dw	0
 1545 0329" 00          sector:	db	0
 1546 032A" 0000        dmaad:	dw	0
 1547 032C" 0080        hsecsiz: dw	0080h
 1548                   
 1549                   	end
 2 Error(s) Detected. 1487 Program Bytes. 814 Data Bytes.
 222 Symbols Detected.

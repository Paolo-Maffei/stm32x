; LDRBIOS for CP/M Plus (for ALTAIR 8800 with Z80 CPU as SIMH simulation)
; written by Peter Schorn (December 2001)
; based on work by Bill Smith (CPM3ON2)
; and on Charles (Dutch) Owen's BIOS for CPM2.2
; and on Digital Research's modular BIOS

; Change history

; 27-Jun-2010, P. Schorn, fixed SIMH interface version check
; 15-Apr-2002, P. Schorn, simplifed disk read / write code

	.Z80

track1	equ	255		; maximum number of tracks + 1
asecsiz	equ	137		; size of ALTAIR physical sector
csecsiz	equ	0080h		; sector size CP/M
secsiz	equ	137		; size of ALTAIR physical sector
spt	equ	32		; sectors per track
sptmask	equ	spt-1		; mask corresponding to 'spt'
cr	equ	13		; Carriage Return
lf	equ	10		; Line Feed
bioserr	equ	1		; 1 indicates BIOS error

simhport		equ	0feh		; SIMH port
getVersionSIMHCmd	equ	6		; version command


;	Address		Mode	Function
;	-------		----	--------
;	selout		Out	Selects and enables controller and drive
;	statin		In	Indicates status of drive and controller
;	dskcon		Out	Controls disk function
;	secpos		In	Indicates current sector position of disk
;	dskwrit		Out	Write data
;	dskread		In	Read data

selout	equ	8		; port to select and enable controller and drive (OUT)
;	+---+---+---+---+---+---+---+---+
;	| C | X | X | X |   Device      |
;	+---+---+---+---+---+---+---+---+
;
;	C	= If this bit is 1, the disk controller selected by 'device' is
;		  cleared. If the bit is zero, 'device' is selected as the
;		  device being controlled by subsequent I/O operations.
;	X	= not used
;	Device	= value zero thru 15, selects drive to be controlled.

statin	equ	8		; port indicating status of drive and controller (IN)
;	+---+---+---+---+---+---+---+---+
;	| R | Z | I | X | X | H | M | W |
;	+---+---+---+---+---+---+---+---+
;
;	W - When 0, write circuit ready to write another byte.
;	M - When 0, head movement is allowed
;	H - When 0, indicates head is loaded for read/write
;	X - not used (will be 0)
;	I - When 0, indicates interrupts enabled (not used this simulator)
;	Z - When 0, indicates head is on track 0
;	R - When 0, indicates that read circuit has new byte to read

dskcon	equ	9		; port to control disc function (OUT)
;	+---+---+---+---+---+---+---+---+
;	| W | C | D | E | U | H | O | I |
;	+---+---+---+---+---+---+---+---+
;
;	I - When 1, steps head IN one track
;	O - When 1, steps head OUT one track
;	H - When 1, loads head to drive surface
;	U - When 1, unloads head
;	E - Enables interrupts (ignored by this simulator)
;	D - Disables interrupts (ignored by this simulator)
;	C - When 1 lowers head current (ignored by this simulator)
;	W - When 1, starts Write Enable sequence:
;	    W bit on device 'statin' (see above) will go 1 and data will be read from
;	    port 'dskread' until 137 bytes have been read by the controller from
;	    that port. The W bit will go off then, and the sector data will be written
;	    to disk. Before you do this, you must have stepped the track to the desired
;	    number, and waited until the right sector number is presented on
;	    device 'secpos', then set this bit.

secpos	equ	9		; port to indicate current sector position of disk (IN)
;	As the sectors pass by the read head, they are counted and the
;	number of the current one is available in this register.
;
;	+---+---+---+---+---+---+---+---+
;	| X | X |  Sector Number    | T |
;	+---+---+---+---+---+---+---+---+
;
;	X		= Not used
;	Sector number	= binary of the sector number currently under the head, 0-31.
;	T		= Sector True, is a 1 when the sector is positioned to read or write.

dskread	equ	10		; port to read data (IN)

;	All I/O is via programmed I/O. Each device has a status port
;	and a data port. A write to the status port can select
;	some options for the device although the simulator only
;	recognizes the reset command (0x03).
;	A read of the status port gets the port status:
;
;	+---+---+---+---+---+---+---+---+
;	| X | X | X | X | X | X | O | I |
;	+---+---+---+---+---+---+---+---+
;
;	I - A 1 in this bit position means a character has been received
;		on the data port and is ready to be read.
;	O - A 1 in this bit means the port is ready to receive a character
;		on the data port and transmit it out over the serial line.
;
;	A read to the data port gets the buffered character, a write
;	to the data port writes the character to the device.
constat	equ	16		; sio port 1 status port
condata	equ	17		; sio port 1 data port

; masks for disk controller (statin)
mhm	equ	02h		; head movement mask
mtzero	equ	40h		; head on track zero mask
mall	equ	0ffh		; everything ok mask

; commands for disk controller (dskcon)
cstepin	equ	01h		; step in command
cstepot	equ	02h		; step out command
cload	equ	04h		; load head to drive surface command
cuload	equ	08h		; unload head from drive surface command

; Macro Definitions for CP/M3 BIOS Data Structures.

	; dph	translate$table,	- disk parameter header
	;	disk$parameter$block,
	;	checksum$size,			(optional)
	;	alloc$size			(optional)

	; dpb	physical$sector$size,	- disk parameter block
	;	physical$sectors$per$track,
	;	number$tracks,
	;	block$size,
	;	number$dir$entries,
	;	track$offset,
	;	checksum$vec$size		(optional)

; Drive Table. Contains 16 one word entries.

dph macro ?trans,?dpb,?csize,?asize
    local ?csv,?alv
	dw ?trans		; translate table address
	db 0,0,0,0,0,0,0,0,0	; BDOS Scratch area
	db 0			; media flag
	dw ?dpb			; disk parameter block
    if not nul ?csize
	dw ?csv			; checksum vector
    else
	dw 0FFFEh		; checksum vector allocated by
    endif			; GENCPM
    if not nul ?asize
	dw ?alv			; allocation vector
    else
	dw 0FFFEh		; alloc vector allocated by GENCPM
    endif
	dw 0fffeh		; dirbcb allocated by GENCPM
	dw 0ffffh		; dtabcb not used (record size 128))
	dw 0ffffh		; no hashing
	db 0			; hash bank

    if not nul ?csize
?csv	ds	?csize		; checksum vector
    endif
    if not nul ?asize
?alv	ds	?asize		; allocation vector
    endif

    endm

dpb macro ?psize,?pspt,?trks,?bls,?ndirs,?off,?ncks
    local ?spt,?bsh,?blm,?exm,?dsm,?drm,?al0,?al1,?cks,?psh,?psm
    local ?n
;; physical sector mask and physical sector shift
    ?psh	defl 0
    ?n		defl ?psize/128
    ?psm	defl ?n-1
	rept 8
	?n	defl ?n/2
 	    if ?n EQ 0
	    exitm
	    endif
	?psh	defl ?psh + 1
	endm
    ?spt	defl ?pspt*(?psize/128)

    ?bsh	defl 3
    ?n		defl ?bls/1024
	rept 8
	?n	defl ?n/2
	    if ?n EQ 0
	    exitm
	    endif
	?bsh	defl ?bsh + 1
	endm
    ?blm	defl ?bls/128-1
    ?size	defl (?trks-?off)*?spt
    ?dsm	defl ?size/(?bls/128)-1

    ?exm	defl ?bls/1024
	if ?dsm GT 255
	    if ?bls EQ 1024
.'Error, can''t have this size disk with 1k block size'
	    exitm
	    endif
	?exm	defl ?exm/2
	endif
    ?exm	defl ?exm-1
    ?all	defl 0
    ?n		defl (?ndirs*32+?bls-1)/?bls
	rept ?n
	?all	defl (?all shr 1) or 8000h
	endm
    ?al0	defl high ?all
    ?al1	defl low ?all
    ?drm	defl ?ndirs-1
    if not nul ?ncks
    	?cks	defl ?ncks
    else
	?cks	defl ?ndirs/4
    endif
	dw	?spt		; 128 byte records per track
	db	?bsh,?blm	; block shift and mask
	db	?exm		; extent mask
	dw	?dsm		; maximum block number
	dw	?drm		; maximum directory entry number
	db	?al0,?al1	; alloc vector for directory
	dw	?cks		; checksum size
	dw	?off		; offset for system tracks
	db	?psh,?psm	; physical sector size shift
				; and mask
    endm

;--------------------------------------------------------
;
;	cp/m plus version 3.0 jump table
;
;--------------------------------------------------------

	cseg

	; * needs to be implemented in LDRBIOS
	jp	boot		; * arrive here from cold start load
	jp	wboot		;   arrive here for warm start
	jp	const		;   return console input status
	jp	conin		;   read console character
	jp	conout		; * write console character
	jp	list		;   write list character
	jp	auxout		;   write aux character
	jp	auxin		;   read aux character
	jp	home		; * move to track zero on selected drive
	jp	seldsk		; * select disk drive
	jp	settrk		; * set track number
	jp	setsec		; * set sector number
	jp	setdma		; * set DMA address
	jp	read		; * read selected sector
	jp	write		;   write selected sector
	jp	listst		;   return list device status
	jp	sectrn		; * translate logical to physical sector number
	jp	conost		;   return console output status
	jp	auxist		;   return aux device input status
	jp	auxost		;   return aux device output status
	jp	devtbl		;   return address of character i/o table
	jp	devini		;   init character i/o devices
	jp	drvtbl		;   return address of disk drive table
	jp	multio		;   set number of consec. sec. to read/write
	jp	flush		;   flush user [de]blocking buffers
	jp	move		; * copy memory to memory
	jp	time		;   Signal Time and Date operation
	jp	selmem		;   select memory bank
	jp	setbnk		;   set bank for next DMA
	jp	xmove		;   set banks for next move
	jp	0		;   reserved for future expansion
	jp	0		;   reserved for future expansion
	jp	0		;   reserved for future expansion

diffv:	jp	nc,nextb2	; received character was higher, ok
wrongv:	ld	de,reqbeg	; wrong SIMH version, load error message
	call	msg		; display it
	halt			; do not proceed
	jp	nextb2
boot:	ld	de,ldrvrs	; display loader version
	call	msg
	ld	b,0ffh and (reqend-requir)	; number of characters to compare
	ld	hl,requir	; pointer to minimal required version
	ld	a,getVersionSIMHCmd	; issue SIMH interface version command
	out	(simhport),a
nextb1:	in	a,(simhport)	; get version identifier
	cp	(hl)		; compare with minimal requiremend
	inc	hl		; advance pointer to minimal requirement
	jp	nz,diffv	; difference deteced
	dec	b		; decrement counter of characters to check
	jp	nz,nextb1	; not yet done
nextb2:	in	a,(simhport)	; get character from SIMH
	or	a
	jp	nz,nextb2	; and repeat until 0 received
wboot:
const:
conin:
list:
auxout:
auxin:
write:
listst:
conost:
auxist:
auxost:
devtbl:
devini:
drvtbl:
multio:
flush:
time:
selmem:
setbnk:
xmove:	ret

msg:	ld	a,(de)		; get next character
	cp	'$'		; '$' denotes end of string
	ret	z		; done if current character is '$'
	ld	c,a		; conout expects character in <C>
	call	conout		; display character on console
	inc	de		; point to next character
	jp	msg		; and repeat

conout:	in	a,(constat)
	rra
	rra
	jp	nc,conout
	ld	a,c
	out	(condata),a
	ret

seldsk:	ld	hl,0		; bad drive
	ld	a,c		; drive request
	or	a
	ret	nz
	ld	hl,dph0
	ld	a,80h
	out	(selout),a
	ret

home:	xor	a		; move to track 00
	jp	settr1

settrk:	ld	a,c
settr1:	ld	(track),a
	ret

setsec:	ld	a,c		; set sector
	ld	(sector),a
	ret

setdma:	ld	l,c
	ld	h,b
	ld	(dmaad),hl	; set dma address
	ret

;
; altair disk read/write drivers
;
read:	call	poshed		; select disk 'diskno' and position disk head to 'track' 
; Input:	'sector' contains desired sector number 
; Output:	head is positioned at desired sector
	ld	a,cload		; command to load head to drive surface
	out	(dskcon),a	; do it
	ld	a,(sector)	; <A> := desired sector
	dec	a		; adjust to range 0..(spt-1)
	ld	b,a		; <B> := adjusted, desired sector
	cp	spt		; compare with sectors per track
	jp	c,seclp2	; desired sector is less than total sectors per track, ok
	halt			; not much we can do
seclp2:	in	a,(secpos)	; get sector position
	rra			; rotate T bit into carry
	jp	c,seclp2	; loop until sector is positioned to read or write
	and	sptmask		; <A> now contains the sector under the head
	cp	b		; compare with desired sector
	jp	nz,seclp2	; repeat if not equal
	ld	hl,altbuf	; address of sector buffer
	ld	e,asecsiz	; number of bytes to read
	di
blrd1:	in	a,(statin)	; get disk status
	or	a		; set sign of byte
	jp	m,blrd1		; loop until disk has new byte to read
	in	a,(dskread)	; read byte of sector
	ld	(hl),a		; store into buffer
	inc	hl		; point to next position in buffer
	dec	e		; decrement size counter
	jp	nz,blrd1	; if not zero, we need to continue
	ld	bc,csecsiz	; sector size in preparation for call to 'ldir'
	ld	a,cuload	; unload head command
	out	(dskcon),a	; do it
	ei
	ld	de,altbuf+3	; address of sector just read
	ld	hl,(dmaad)	; destination address
	ex	de,hl		; prepare for ldir
	call	ldir80
	xor	a		; <A> := 0 means no error
	ret

; Select disk 'diskno' and position disk head to 'track' 	
poshed:	ld	a,(ontrk)
	ld	b,a
	xor	a		; <A> := 0 (disk 0)
	out	(selout),a	; select disk
	in	a,(statin)	; get status of selected drive
	cp	mall		; ok?
	jp	z,selerr	; no!
	ld	a,b		; <B> := track of selected disk
	cp	track1		; compare with non-existing track
	jp	nz,alseek	; if a regular track, proceed to seek
; position disk on track zero, <A> == 0 at the end
dhome:	in	a,(statin)	; position disk to track 0
	and	mtzero		; mask for 'head is on track zero'
	jp	z,posh1		; track zero reached, done
	call	whmove		; loop until head movement is allowed
	ld	a,cstepot	; command for 'step head out one track'
	out	(dskcon),a	; do it
	jp	dhome		; try again
posh1:	ld	b,a		; <B> := 0 (current track)
;Input:		location 'track' contains desired track
;		<B> contains current track
;Output:	desired track is reached and stored in track array
alseek:	ld	a,(track)	; seek to 'track' (cur track in b)
	ld	e,a		; <E> := desired track
	ld	a,b		; <A> := current track
	sub	e		; <A> := current track - desired track
	ret	z		; we are already at desired track
	ld	e,a		; e is the number of "step in" or "step out"
	jp	c,stpin		; current track < desired track
	ld	c,cstepot	; command for step head out one track
	jp	aseek		; perform steps
stpin:	ld	c,cstepin	; command for step head in one track
	cpl			; <A> := ~(current track - desired track)
	inc	a		; <A> := desired track - current track (positive)
	ld	e,a		; <E> is positive number of tracks to move
aseek:	call	whmove		; loop until head movement is allowed
	ld	a,c		; get command (step in or step out)
	out	(dskcon),a	; perform it
	dec	e		; next iteration
	jp	nz,aseek	; loop if not done
	ld	a,(track)	; this is the current track
	ld	(ontrk),a	; update 'ontrk'
	ret
selerr:	pop	hl		; discard return address
	ld	a,bioserr	; <A> := 1 means error
	ret

; loop until head movement is allowed
whmove:	in	a,(statin)	; get status
	and	mhm		; mask for 'head movement allowed'
	jp	nz,whmove	; loop until movement allowed
	ret

sectrn:	ex	de,hl
	add	hl,bc
	ld	l,(hl)
	ld	h,0
	ret

move:	ex	de,hl
	call	ldir80
	ex	de,hl
	ret

ldir80:	xor	a		; <A> := 0
	dec	a		; <A> := 1111'1111b
	jp	pe,ldir1	; on an 8080 this means parity is even
	ldir			; otherwise we have a Z80
	ret
ldir1:	ld	a,(hl)
	ld	(de),a
	inc	hl
	inc	de
	dec	bc
	ld	a,c
	or	b
	jp	nz,ldir1
	ret

ldrvrs:	db	cr, lf, 'LDRBIOS3 v1.07 27-Jun-2010', cr, lf, '$'
reqbeg:	db	cr, lf, 'SIMH interface version '
requir:	db	'SIMH003'
reqend	equ	$
	db	' or above required.', cr, lf, '$'
dph0:	dph	atrans,dpbX
dpbX:	dpb	128,spt,254,2048,256,6
atrans:	db	01,18,03,20,05,22,07,24
	db	09,26,11,28,13,30,15,32
	db	17,02,19,04,21,06,23,08
	db	25,10,27,12,29,14,31,16

; Position of disk drive head
ontrk:	db	track1	; current track# drive 0 (logical 1)
track:	db	0
sector:	db	0
dmaad:	dw	0
altbuf:	ds	asecsiz

	end
